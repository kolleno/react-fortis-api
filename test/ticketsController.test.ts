/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  OrderEnum,
  ResponseTicket,
  ResponseTicketsCollection,
  TicketsController,
  Type2Enum,
  Type3Enum,
  Type4Enum,
  Type82Enum,
  Type83Enum,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('TicketsController', () => {
  let controller : TicketsController;

  beforeAll(() => {
    controller = new TicketsController(testClient);
  });

  it('should Test List all tickets related', async () => {
    const response = await makeApiCall(
      () => controller.listAllTicketsRelated(
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseTicketsCollection = {
      type: Type83Enum.TicketsCollection,
      list: [
        {
          accountHolderName: 'John Smith',
          expDate: '0722',
          accountNumber: '545454545454545',
          billingAddress: {
            postalCode: '48375',
          },
          contactId: '11e95f8ec39de8fbdb0a4f1a',
          locationApiId: 'location_api_id0',
          id: '11e95f8ec39de8fbdb0a4f1a',
          createdTs: 1422040992,
          createdUserId: '11e95f8ec39de8fbdb0a4f1a',
        }
      ],
      links: {
        type: Type2Enum.Links,
        first: '/v1/endpoint?page[size]=10&page[number]=1',
        previous: '/v1/endpoint?page[size]=10&page[number]=5',
        next: '/v1/endpoint?page[size]=10&page[number]=7',
        last: '/v1/endpoint?page[size]=10&page[number]=42',
      },
      pagination: {
        type: Type3Enum.Pagination,
        totalCount: 423,
        pageCount: 42,
        pageNumber: 6,
        pageSize: 10,
      },
      sort: {
        type: Type4Enum.Sorting,
        fields: [
          {
            field: 'last_name',
            order: OrderEnum.Asc,
          }
        ],
      },
    };
    (expected.list ?? [])[0].cvv = null;

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test View single ticket record', async () => {
    const ticketId = '11e95f8ec39de8fbdb0a4f1a';

    const response = await makeApiCall(
      () => controller.viewSingleTicketRecord(ticketId, undefined, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseTicket = {
      type: Type82Enum.Ticket,
      data: {
        accountHolderName: 'John Smith',
        expDate: '0722',
        accountNumber: '545454545454545',
        billingAddress: {
          postalCode: '48375',
        },
        contactId: '11e95f8ec39de8fbdb0a4f1a',
        locationApiId: 'location_api_id0',
        id: '11e95f8ec39de8fbdb0a4f1a',
        createdTs: 1422040992,
        createdUserId: '11e95f8ec39de8fbdb0a4f1a',
      },
    };
    expected.data.cvv = null;

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
