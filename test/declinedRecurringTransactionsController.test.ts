/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  DeclinedRecurringTransactionsController,
  OrderEnum,
  ResponseDeclinedRecurringTransaction,
  ResponseDeclinedRecurringTransactionResend,
  ResponseDeclinedRecurringTransactionsCollection,
  Status3Enum,
  Type15Enum,
  Type16Enum,
  Type21Enum,
  Type2Enum,
  Type3Enum,
  Type4Enum,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('DeclinedRecurringTransactionsController', () => {
  let controller : DeclinedRecurringTransactionsController;

  beforeAll(() => {
    controller = new DeclinedRecurringTransactionsController(testClient);
  });

  it('should Test Get one Declined Recurring Transaction', async () => {
    const declinedRecurringTransactionId = '11e95f8ec39de8fbdb0a4f1a';

    const response = await makeApiCall(
      () => controller.getOneDeclinedRecurringTransaction(
        declinedRecurringTransactionId,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseDeclinedRecurringTransaction = {
      type: Type15Enum.DeclinedRecurringTransaction,
      data: {
        id: '11e95f8ec39de8fbdb0a4f1a',
        status: Status3Enum.Paid,
        recurringId: '11e95f8ec39de8fbdb0a4f1a',
        createdTs: 1422040992,
        createdUserId: '11e95f8ec39de8fbdb0a4f1a',
        modifiedTs: 1422040992,
        modifiedUserId: '11e95f8ec39de8fbdb0a4f1a',
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test List all Declined Recurring Transactions', async () => {
    const response = await makeApiCall(
      () => controller.listAllDeclinedRecurringTransactions(
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseDeclinedRecurringTransactionsCollection = {
      type: Type16Enum.DeclinedRecurringTransactionsCollection,
      list: [
        {
          id: '11e95f8ec39de8fbdb0a4f1a',
          status: Status3Enum.Paid,
          recurringId: '11e95f8ec39de8fbdb0a4f1a',
          createdTs: 1422040992,
          createdUserId: '11e95f8ec39de8fbdb0a4f1a',
          modifiedTs: 1422040992,
          modifiedUserId: '11e95f8ec39de8fbdb0a4f1a',
        }
      ],
      links: {
        type: Type2Enum.Links,
        first: '/v1/endpoint?page[size]=10&page[number]=1',
        previous: '/v1/endpoint?page[size]=10&page[number]=5',
        next: '/v1/endpoint?page[size]=10&page[number]=7',
        last: '/v1/endpoint?page[size]=10&page[number]=42',
      },
      pagination: {
        type: Type3Enum.Pagination,
        totalCount: 423,
        pageCount: 42,
        pageNumber: 6,
        pageSize: 10,
      },
      sort: {
        type: Type4Enum.Sorting,
        fields: [
          {
            field: 'last_name',
            order: OrderEnum.Asc,
          }
        ],
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test Rerun the transaction', async () => {
    const declinedRecurringTransactionId = '11e95f8ec39de8fbdb0a4f1a';

    const response = await makeApiCall(
      () => controller.rerunTheTransaction(
        declinedRecurringTransactionId,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseDeclinedRecurringTransaction = {
      type: Type15Enum.DeclinedRecurringTransaction,
      data: {
        id: '11e95f8ec39de8fbdb0a4f1a',
        status: Status3Enum.Paid,
        recurringId: '11e95f8ec39de8fbdb0a4f1a',
        createdTs: 1422040992,
        createdUserId: '11e95f8ec39de8fbdb0a4f1a',
        modifiedTs: 1422040992,
        modifiedUserId: '11e95f8ec39de8fbdb0a4f1a',
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test Resend the transaction', async () => {
    const declinedRecurringTransactionId = '11e95f8ec39de8fbdb0a4f1a';

    const response = await makeApiCall(
      () => controller.resendTheTransaction(declinedRecurringTransactionId)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseDeclinedRecurringTransactionResend = {
      type: Type21Enum.DeclinedRecurringTransactionResend,
      data: {
        id: '11e95f8ec39de8fbdb0a4f1a',
        emailLogId: '11e95f8ec39de8fbdb0a4f1a',
        email: 'email@domain.com',
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
