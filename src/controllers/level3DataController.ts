/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ResponseTransactionLevel3,
  responseTransactionLevel3Schema,
} from '../models/responseTransactionLevel3';
import {
  ResponseTransactionLevel3Master,
  responseTransactionLevel3MasterSchema,
} from '../models/responseTransactionLevel3Master';
import {
  ResponseTransactionLevel3Visa,
  responseTransactionLevel3VisaSchema,
} from '../models/responseTransactionLevel3Visa';
import {
  V1TransactionsLevel3MasterCardRequest,
  v1TransactionsLevel3MasterCardRequestSchema,
} from '../models/v1TransactionsLevel3MasterCardRequest';
import {
  V1TransactionsLevel3VisaRequest,
  v1TransactionsLevel3VisaRequestSchema,
} from '../models/v1TransactionsLevel3VisaRequest';
import { string } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';

export class Level3DataController extends BaseController {
  /**
   * @param transactionId  Transaction ID
   * @param body
   * @return Response from the API call
   */
  async createANewLevel3EntryForAMasterCard(
    transactionId: string,
    body: V1TransactionsLevel3MasterCardRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionLevel3Master>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      transactionId: [transactionId, string()],
      body: [body, v1TransactionsLevel3MasterCardRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v1/transactions/${mapped.transactionId}/level3/master-card`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(
      responseTransactionLevel3MasterSchema,
      requestOptions
    );
  }

  /**
   * @param transactionId  Transaction ID
   * @param body
   * @return Response from the API call
   */
  async createANewLevel3EntryForAVisa(
    transactionId: string,
    body: V1TransactionsLevel3VisaRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionLevel3Visa>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      transactionId: [transactionId, string()],
      body: [body, v1TransactionsLevel3VisaRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v1/transactions/${mapped.transactionId}/level3/visa`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionLevel3VisaSchema, requestOptions);
  }

  /**
   * @param transactionId  Transaction ID
   * @param level3Id       Level 3 ID
   * @return Response from the API call
   */
  async deleteASingleLevel3Record(
    transactionId: string,
    level3Id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionLevel3>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      transactionId: [transactionId, string()],
      level3Id: [level3Id, string()],
    });
    req.appendTemplatePath`/v1/transactions/${mapped.transactionId}/level3/${mapped.level3Id}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionLevel3Schema, requestOptions);
  }

  /**
   * @param transactionId  Transaction ID
   * @param level3Id       Level 3 ID
   * @return Response from the API call
   */
  async viewSingleLevel3Record(
    transactionId: string,
    level3Id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionLevel3>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      transactionId: [transactionId, string()],
      level3Id: [level3Id, string()],
    });
    req.appendTemplatePath`/v1/transactions/${mapped.transactionId}/level3/${mapped.level3Id}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionLevel3Schema, requestOptions);
  }
}
