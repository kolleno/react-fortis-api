/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Expand44Enum, expand44EnumSchema } from '../models/expand44Enum';
import { Field50Enum, field50EnumSchema } from '../models/field50Enum';
import { FilterBy, filterBySchema } from '../models/filterBy';
import { Format1Enum, format1EnumSchema } from '../models/format1Enum';
import { Order20, order20Schema } from '../models/order20';
import { Page, pageSchema } from '../models/page';
import { ResponseToken, responseTokenSchema } from '../models/responseToken';
import {
  ResponseTokensCollection,
  responseTokensCollectionSchema,
} from '../models/responseTokensCollection';
import {
  V1TokensAchRequest,
  v1TokensAchRequestSchema,
} from '../models/v1TokensAchRequest';
import {
  V1TokensAchRequest1,
  v1TokensAchRequest1Schema,
} from '../models/v1TokensAchRequest1';
import {
  V1TokensCcRequest,
  v1TokensCcRequestSchema,
} from '../models/v1TokensCcRequest';
import {
  V1TokensCcRequest1,
  v1TokensCcRequest1Schema,
} from '../models/v1TokensCcRequest1';
import {
  V1TokensPreviousTransactionRequest,
  v1TokensPreviousTransactionRequestSchema,
} from '../models/v1TokensPreviousTransactionRequest';
import {
  V1TokensTerminalAsyncRequest,
  v1TokensTerminalAsyncRequestSchema,
} from '../models/v1TokensTerminalAsyncRequest';
import {
  V1TokensTerminalRequest,
  v1TokensTerminalRequestSchema,
} from '../models/v1TokensTerminalRequest';
import {
  V1TokensTicketRequest,
  v1TokensTicketRequestSchema,
} from '../models/v1TokensTicketRequest';
import {
  V1TokensWalletRequest,
  v1TokensWalletRequestSchema,
} from '../models/v1TokensWalletRequest';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';

export class TokensController extends BaseController {
  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                  related to the current record being retrieved. For example, if
   *                                                  the API request is for the accountvaults endpoint, and the end
   *                                                  user also needs to know which contact the token belongs to, this
   *                                                  data can be returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async createANewACHToken(
    body: V1TokensAchRequest,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/ach');
    const mapped = req.prepareArgs({
      body: [body, v1TokensAchRequestSchema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                 related to the current record being retrieved. For example, if the
   *                                                 API request is for the accountvaults endpoint, and the end user
   *                                                 also needs to know which contact the token belongs to, this data
   *                                                 can be returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async createANewCreditCardToken(
    body: V1TokensCcRequest,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/cc');
    const mapped = req.prepareArgs({
      body: [body, v1TokensCcRequestSchema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                  extra data related to the current record being
   *                                                                  retrieved. For example, if the API request is for
   *                                                                  the accountvaults endpoint, and the end user also
   *                                                                  needs to know which contact the token belongs to,
   *                                                                  this data can be returned in the accountvaults
   *                                                                  endpoint request.
   * @return Response from the API call
   */
  async createANewPreviousTransactionToken(
    body: V1TokensPreviousTransactionRequest,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/previous-transaction');
    const mapped = req.prepareArgs({
      body: [body, v1TokensPreviousTransactionRequestSchema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewTerminalTokenWithAsyncMethod(
    body: V1TokensTerminalAsyncRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/terminal-async');
    const mapped = req.prepareArgs({
      body: [body, v1TokensTerminalAsyncRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                       related to the current record being retrieved. For example,
   *                                                       if the API request is for the accountvaults endpoint, and
   *                                                       the end user also needs to know which contact the token
   *                                                       belongs to, this data can be returned in the accountvaults
   *                                                       endpoint request.
   * @return Response from the API call
   */
  async createANewTerminalToken(
    body: V1TokensTerminalRequest,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/terminal');
    const mapped = req.prepareArgs({
      body: [body, v1TokensTerminalRequestSchema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                     related to the current record being retrieved. For example, if
   *                                                     the API request is for the accountvaults endpoint, and the end
   *                                                     user also needs to know which contact the token belongs to,
   *                                                     this data can be returned in the accountvaults endpoint
   *                                                     request.
   * @return Response from the API call
   */
  async createANewTicketToken(
    body: V1TokensTicketRequest,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/ticket');
    const mapped = req.prepareArgs({
      body: [body, v1TokensTicketRequestSchema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                     related to the current record being retrieved. For example, if
   *                                                     the API request is for the accountvaults endpoint, and the end
   *                                                     user also needs to know which contact the token belongs to,
   *                                                     this data can be returned in the accountvaults endpoint
   *                                                     request.
   * @return Response from the API call
   */
  async createANewWalletToken(
    body: V1TokensWalletRequest,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('POST', '/v1/tokens/wallet');
    const mapped = req.prepareArgs({
      body: [body, v1TokensWalletRequestSchema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param tokenId  A unique, system-generated identifier for the Token.
   * @return Response from the API call
   */
  async deleteASingleTokenRecord(
    tokenId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ tokenId: [tokenId, string()] });
    req.appendTemplatePath`/v1/tokens/${mapped.tokenId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param tokenId  A unique, system-generated identifier for the Token.
   * @param expand   Most endpoints in the API have a way to retrieve extra data related to the
   *                                   current record being retrieved. For example, if the API request is for the
   *                                   accountvaults endpoint, and the end user also needs to know which contact the
   *                                   token belongs to, this data can be returned in the accountvaults endpoint
   *                                   request.
   * @param fields   You can use any `field_name` from this endpoint results to filter the list of
   *                                   fields returned on the response.
   * @return Response from the API call
   */
  async viewSingleTokenRecord(
    tokenId: string,
    expand?: Expand44Enum[],
    fields?: Field50Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      tokenId: [tokenId, string()],
      expand: [expand, optional(array(expand44EnumSchema))],
      fields: [fields, optional(array(field50EnumSchema))],
    });
    req.query('expand', mapped.expand);
    req.query('fields', mapped.fields);
    req.appendTemplatePath`/v1/tokens/${mapped.tokenId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param page       Use this field to specify paginate your results, by using page size and
   *                                     number. You can use one of the following methods: >/endpoint?page={ "number":
   *                                     1, "size": 50 } > >/endpoint?page[number]=1&page[size]=50 >
   * @param order      Criteria used in query string parameters to order results.  Most fields from
   *                                     the endpoint results can be used as a `key`.  Unsupported fields or operators
   *                                     will return a `412`.  Must be encoded, or use syntax that does not require
   *                                     encoding. >/endpoint?order[0][key]=created_ts&order[0][operator]=asc >
   *                                     >/endpoint?order=[{ "key": "created_ts", "operator": "asc"}] > >/endpoint?
   *                                     order=[{ "key": "balance", "operator": "desc"},{ "key": "created_ts",
   *                                     "operator": "asc"}] >
   * @param filterBy   Filter criteria that can be used in query string parameters.  Most fields
   *                                     from the endpoint results can be used as a `key`.  Unsupported fields or
   *                                     operators will return a `412`. Must be encoded, or use syntax that does not
   *                                     require encoding. >?
   *                                     filter_by[0][key]=first_name&filter_by[0][operator]==&filter_by[0][value]=Stev
   *                                     e > >/endpoint?filter_by=[{ "key": "first_name", "operator": "=", "value":
   *                                     "Fred" }] > >/endpoint?filter_by=[{ "key": "account_type", "operator": "=",
   *                                     "value": "VISA" }] > >/endpoint?filter_by=[{ "key": "created_ts", "operator":
   *                                     ">=", "value": "946702799" }, { "key": "created_ts", "operator": "<=", value:
   *                                     "1695061891" }] > >/endpoint?filter_by=[{ "key": "last_name", "operator": "IN",
   *                                     "value": "Williams,Brown,Allman" }] >
   * @param expand     Most endpoints in the API have a way to retrieve extra data related to the
   *                                     current record being retrieved. For example, if the API request is for the
   *                                     accountvaults endpoint, and the end user also needs to know which contact the
   *                                     token belongs to, this data can be returned in the accountvaults endpoint
   *                                     request.
   * @param format     Reporting format, valid values: csv, tsv
   * @param typeahead  You can use any `field_name` from this endpoint results to order the list
   *                                     using the value provided as filter for the same `field_name`. It will be
   *                                     ordered using the following rules: 1) Exact match, 2) Starts with, 3) Contains.
   *                                     >/endpoint?filter={ "field_name": "Value" }&_typeahead=field_name >
   * @param fields     You can use any `field_name` from this endpoint results to filter the list of
   *                                     fields returned on the response.
   * @return Response from the API call
   */
  async listAllTokensRelated(
    page?: Page,
    order?: Order20[],
    filterBy?: FilterBy[],
    expand?: Expand44Enum[],
    format?: Format1Enum,
    typeahead?: string,
    fields?: Field50Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTokensCollection>> {
    const req = this.createRequest('GET', '/v1/tokens');
    const mapped = req.prepareArgs({
      page: [page, optional(pageSchema)],
      order: [order, optional(array(order20Schema))],
      filterBy: [filterBy, optional(array(filterBySchema))],
      expand: [expand, optional(array(expand44EnumSchema))],
      format: [format, optional(format1EnumSchema)],
      typeahead: [typeahead, optional(string())],
      fields: [fields, optional(array(field50EnumSchema))],
    });
    req.query('page', mapped.page);
    req.query('order', mapped.order);
    req.query('filter_by', mapped.filterBy);
    req.query('expand', mapped.expand);
    req.query('_format', mapped.format);
    req.query('_typeahead', mapped.typeahead);
    req.query('fields', mapped.fields);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokensCollectionSchema, requestOptions);
  }

  /**
   * @param tokenId      A unique, system-generated identifier for the Token.
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                   related to the current record being retrieved. For example, if
   *                                                   the API request is for the accountvaults endpoint, and the end
   *                                                   user also needs to know which contact the token belongs to, this
   *                                                   data can be returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async updateACHToken(
    tokenId: string,
    body: V1TokensAchRequest1,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      tokenId: [tokenId, string()],
      body: [body, v1TokensAchRequest1Schema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/tokens/${mapped.tokenId}/ach`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }

  /**
   * @param tokenId      A unique, system-generated identifier for the Token.
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                  related to the current record being retrieved. For example, if
   *                                                  the API request is for the accountvaults endpoint, and the end
   *                                                  user also needs to know which contact the token belongs to, this
   *                                                  data can be returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async updateCCToken(
    tokenId: string,
    body: V1TokensCcRequest1,
    expand?: Expand44Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseToken>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      tokenId: [tokenId, string()],
      body: [body, v1TokensCcRequest1Schema],
      expand: [expand, optional(array(expand44EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/tokens/${mapped.tokenId}/cc`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTokenSchema, requestOptions);
  }
}
