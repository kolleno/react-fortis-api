/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Expand10Enum, expand10EnumSchema } from '../models/expand10Enum';
import { Field32Enum, field32EnumSchema } from '../models/field32Enum';
import { Field33Enum, field33EnumSchema } from '../models/field33Enum';
import { Field34Enum, field34EnumSchema } from '../models/field34Enum';
import { Field35Enum, field35EnumSchema } from '../models/field35Enum';
import { FilterBy, filterBySchema } from '../models/filterBy';
import { Format1Enum, format1EnumSchema } from '../models/format1Enum';
import { Order20, order20Schema } from '../models/order20';
import { Page, pageSchema } from '../models/page';
import {
  RelationshipEnum,
  relationshipEnumSchema,
} from '../models/relationshipEnum';
import {
  ResponseLocation,
  responseLocationSchema,
} from '../models/responseLocation';
import {
  ResponseLocationInfo,
  responseLocationInfoSchema,
} from '../models/responseLocationInfo';
import {
  ResponseLocationInfosCollection,
  responseLocationInfosCollectionSchema,
} from '../models/responseLocationInfosCollection';
import {
  ResponseLocationsCollection,
  responseLocationsCollectionSchema,
} from '../models/responseLocationsCollection';
import {
  ResponseLocationSearchsCollection,
  responseLocationSearchsCollectionSchema,
} from '../models/responseLocationSearchsCollection';
import { array, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';

export class LocationsController extends BaseController {
  /**
   * @param page         Use this field to specify paginate your results, by using page size and
   *                                         number. You can use one of the following methods: >/endpoint?page={
   *                                         "number": 1, "size": 50 } > >/endpoint?page[number]=1&page[size]=50 >
   * @param keyword      You can use any value to search on specific fields of this endpoint
   *                                         results. You can not specify the fields that are used.
   * @param relationship Used to filter the type of locations that will be returned
   * @return Response from the API call
   */
  async locationsSearch(
    page?: Page,
    keyword?: string,
    relationship?: RelationshipEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseLocationSearchsCollection>> {
    const req = this.createRequest('GET', '/v1/location-searches');
    const mapped = req.prepareArgs({
      page: [page, optional(pageSchema)],
      keyword: [keyword, optional(string())],
      relationship: [relationship, optional(relationshipEnumSchema)],
    });
    req.query('page', mapped.page);
    req.query('keyword', mapped.keyword);
    req.query('relationship', mapped.relationship);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(
      responseLocationSearchsCollectionSchema,
      requestOptions
    );
  }

  /**
   * @param page       Use this field to specify paginate your results, by using page size and
   *                                     number. You can use one of the following methods: >/endpoint?page={ "number":
   *                                     1, "size": 50 } > >/endpoint?page[number]=1&page[size]=50 >
   * @param order      Criteria used in query string parameters to order results.  Most fields from
   *                                     the endpoint results can be used as a `key`.  Unsupported fields or operators
   *                                     will return a `412`.  Must be encoded, or use syntax that does not require
   *                                     encoding. >/endpoint?order[0][key]=created_ts&order[0][operator]=asc >
   *                                     >/endpoint?order=[{ "key": "created_ts", "operator": "asc"}] > >/endpoint?
   *                                     order=[{ "key": "balance", "operator": "desc"},{ "key": "created_ts",
   *                                     "operator": "asc"}] >
   * @param filterBy   Filter criteria that can be used in query string parameters.  Most fields
   *                                     from the endpoint results can be used as a `key`.  Unsupported fields or
   *                                     operators will return a `412`. Must be encoded, or use syntax that does not
   *                                     require encoding. >?
   *                                     filter_by[0][key]=first_name&filter_by[0][operator]==&filter_by[0][value]=Stev
   *                                     e > >/endpoint?filter_by=[{ "key": "first_name", "operator": "=", "value":
   *                                     "Fred" }] > >/endpoint?filter_by=[{ "key": "account_type", "operator": "=",
   *                                     "value": "VISA" }] > >/endpoint?filter_by=[{ "key": "created_ts", "operator":
   *                                     ">=", "value": "946702799" }, { "key": "created_ts", "operator": "<=", value:
   *                                     "1695061891" }] > >/endpoint?filter_by=[{ "key": "last_name", "operator": "IN",
   *                                     "value": "Williams,Brown,Allman" }] >
   * @param expand     Most endpoints in the API have a way to retrieve extra data related to the
   *                                     current record being retrieved. For example, if the API request is for the
   *                                     accountvaults endpoint, and the end user also needs to know which contact the
   *                                     token belongs to, this data can be returned in the accountvaults endpoint
   *                                     request.
   * @param format     Reporting format, valid values: csv, tsv
   * @param typeahead  You can use any `field_name` from this endpoint results to order the list
   *                                     using the value provided as filter for the same `field_name`. It will be
   *                                     ordered using the following rules: 1) Exact match, 2) Starts with, 3) Contains.
   *                                     >/endpoint?filter={ "field_name": "Value" }&_typeahead=field_name >
   * @param fields     You can use any `field_name` from this endpoint results to filter the list of
   *                                     fields returned on the response.
   * @return Response from the API call
   */
  async listAllLocations(
    page?: Page,
    order?: Order20[],
    filterBy?: FilterBy[],
    expand?: Expand10Enum[],
    format?: Format1Enum,
    typeahead?: string,
    fields?: Field32Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseLocationsCollection>> {
    const req = this.createRequest('GET', '/v1/locations');
    const mapped = req.prepareArgs({
      page: [page, optional(pageSchema)],
      order: [order, optional(array(order20Schema))],
      filterBy: [filterBy, optional(array(filterBySchema))],
      expand: [expand, optional(array(expand10EnumSchema))],
      format: [format, optional(format1EnumSchema)],
      typeahead: [typeahead, optional(string())],
      fields: [fields, optional(array(field32EnumSchema))],
    });
    req.query('page', mapped.page);
    req.query('order', mapped.order);
    req.query('filter_by', mapped.filterBy);
    req.query('expand', mapped.expand);
    req.query('_format', mapped.format);
    req.query('_typeahead', mapped.typeahead);
    req.query('fields', mapped.fields);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseLocationsCollectionSchema, requestOptions);
  }

  /**
   * @param page                        Use this field to specify paginate your results, by using
   *                                                      page size and number. You can use one of the following
   *                                                      methods: >/endpoint?page={ "number": 1, "size": 50 } >
   *                                                      >/endpoint?page[number]=1&page[size]=50 >
   * @param order                       Criteria used in query string parameters to order results.
   *                                                      Most fields from the endpoint results can be used as a `key`.
   *                                                      Unsupported fields or operators will return a `412`.  Must
   *                                                      be encoded, or use syntax that does not require encoding.
   *                                                      >/endpoint?order[0][key]=created_ts&order[0][operator]=asc >
   *                                                      >/endpoint?order=[{ "key": "created_ts", "operator": "asc"}]
   *                                                      > >/endpoint?order=[{ "key": "balance", "operator": "desc"},{
   *                                                      "key": "created_ts", "operator": "asc"}] >
   * @param filterBy                    Filter criteria that can be used in query string parameters.
   *                                                      Most fields from the endpoint results can be used as a `key`.
   *                                                      Unsupported fields or operators will return a `412`. Must
   *                                                      be encoded, or use syntax that does not require encoding. >?
   *                                                      filter_by[0][key]=first_name&filter_by[0][operator]==&filter_
   *                                                      by[0][value]=Steve > >/endpoint?filter_by=[{ "key":
   *                                                      "first_name", "operator": "=", "value": "Fred" }] >
   *                                                      >/endpoint?filter_by=[{ "key": "account_type", "operator":
   *                                                      "=", "value": "VISA" }] > >/endpoint?filter_by=[{ "key":
   *                                                      "created_ts", "operator": ">=", "value": "946702799" }, {
   *                                                      "key": "created_ts", "operator": "<=", value: "1695061891" }]
   *                                                      > >/endpoint?filter_by=[{ "key": "last_name", "operator":
   *                                                      "IN", "value": "Williams,Brown,Allman" }] >
   * @param expand                      Most endpoints in the API have a way to retrieve extra data
   *                                                      related to the current record being retrieved. For example,
   *                                                      if the API request is for the accountvaults endpoint, and the
   *                                                      end user also needs to know which contact the token belongs
   *                                                      to, this data can be returned in the accountvaults endpoint
   *                                                      request.
   * @param format                      Reporting format, valid values: csv, tsv
   * @param typeahead                   You can use any `field_name` from this endpoint results to
   *                                                      order the list using the value provided as filter for the
   *                                                      same `field_name`. It will be ordered using the following
   *                                                      rules: 1) Exact match, 2) Starts with, 3) Contains.
   *                                                      >/endpoint?filter={ "field_name": "Value"
   *                                                      }&_typeahead=field_name >
   * @param fields                      You can use any `field_name` from this endpoint results to
   *                                                      filter the list of fields returned on the response.
   * @param productTransactionActive    Product Transaction Active
   * @param productFileActive           Product File Active
   * @param productInvoiceActive        Product Invoice Active
   * @param productRecurringActive      Product Recurring Active
   * @param productAccountvaultActive   Product Accountvault Active
   * @return Response from the API call
   */
  async locationsDetail(
    page?: Page,
    order?: Order20[],
    filterBy?: FilterBy[],
    expand?: Expand10Enum[],
    format?: Format1Enum,
    typeahead?: string,
    fields?: Field33Enum[],
    productTransactionActive?: unknown,
    productFileActive?: unknown,
    productInvoiceActive?: unknown,
    productRecurringActive?: unknown,
    productAccountvaultActive?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseLocationInfosCollection>> {
    const req = this.createRequest('GET', '/v1/locations/info');
    const mapped = req.prepareArgs({
      page: [page, optional(pageSchema)],
      order: [order, optional(array(order20Schema))],
      filterBy: [filterBy, optional(array(filterBySchema))],
      expand: [expand, optional(array(expand10EnumSchema))],
      format: [format, optional(format1EnumSchema)],
      typeahead: [typeahead, optional(string())],
      fields: [fields, optional(array(field33EnumSchema))],
      productTransactionActive: [productTransactionActive, optional(unknown())],
      productFileActive: [productFileActive, optional(unknown())],
      productInvoiceActive: [productInvoiceActive, optional(unknown())],
      productRecurringActive: [productRecurringActive, optional(unknown())],
      productAccountvaultActive: [
        productAccountvaultActive,
        optional(unknown()),
      ],
    });
    req.query('page', mapped.page);
    req.query('order', mapped.order);
    req.query('filter_by', mapped.filterBy);
    req.query('expand', mapped.expand);
    req.query('_format', mapped.format);
    req.query('_typeahead', mapped.typeahead);
    req.query('fields', mapped.fields);
    req.query('product_transaction_active', mapped.productTransactionActive);
    req.query('product_file_active', mapped.productFileActive);
    req.query('product_invoice_active', mapped.productInvoiceActive);
    req.query('product_recurring_active', mapped.productRecurringActive);
    req.query('product_accountvault_active', mapped.productAccountvaultActive);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(
      responseLocationInfosCollectionSchema,
      requestOptions
    );
  }

  /**
   * @param locationId  Location ID
   * @param expand      Most endpoints in the API have a way to retrieve extra data related to the
   *                                      current record being retrieved. For example, if the API request is for the
   *                                      accountvaults endpoint, and the end user also needs to know which contact the
   *                                      token belongs to, this data can be returned in the accountvaults endpoint
   *                                      request.
   * @param fields      You can use any `field_name` from this endpoint results to filter the list
   *                                      of fields returned on the response.
   * @return Response from the API call
   */
  async viewSingleLocationRecord(
    locationId: string,
    expand?: Expand10Enum[],
    fields?: Field34Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseLocation>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      locationId: [locationId, string()],
      expand: [expand, optional(array(expand10EnumSchema))],
      fields: [fields, optional(array(field34EnumSchema))],
    });
    req.query('expand', mapped.expand);
    req.query('fields', mapped.fields);
    req.appendTemplatePath`/v1/locations/${mapped.locationId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseLocationSchema, requestOptions);
  }

  /**
   * @param locationId                  Location ID
   * @param expand                      Most endpoints in the API have a way to retrieve extra data
   *                                                      related to the current record being retrieved. For example,
   *                                                      if the API request is for the accountvaults endpoint, and the
   *                                                      end user also needs to know which contact the token belongs
   *                                                      to, this data can be returned in the accountvaults endpoint
   *                                                      request.
   * @param fields                      You can use any `field_name` from this endpoint results to
   *                                                      filter the list of fields returned on the response.
   * @param productTransactionActive    Product Transaction Active
   * @param productFileActive           Product File Active
   * @param productInvoiceActive        Product Invoice Active
   * @param productRecurringActive      Product Recurring Active
   * @param productAccountvaultActive   Product Accountvault Active
   * @return Response from the API call
   */
  async locationDetail(
    locationId: string,
    expand?: Expand10Enum[],
    fields?: Field35Enum[],
    productTransactionActive?: unknown,
    productFileActive?: unknown,
    productInvoiceActive?: unknown,
    productRecurringActive?: unknown,
    productAccountvaultActive?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseLocationInfo>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      locationId: [locationId, string()],
      expand: [expand, optional(array(expand10EnumSchema))],
      fields: [fields, optional(array(field35EnumSchema))],
      productTransactionActive: [productTransactionActive, optional(unknown())],
      productFileActive: [productFileActive, optional(unknown())],
      productInvoiceActive: [productInvoiceActive, optional(unknown())],
      productRecurringActive: [productRecurringActive, optional(unknown())],
      productAccountvaultActive: [
        productAccountvaultActive,
        optional(unknown()),
      ],
    });
    req.query('expand', mapped.expand);
    req.query('fields', mapped.fields);
    req.query('product_transaction_active', mapped.productTransactionActive);
    req.query('product_file_active', mapped.productFileActive);
    req.query('product_invoice_active', mapped.productInvoiceActive);
    req.query('product_recurring_active', mapped.productRecurringActive);
    req.query('product_accountvault_active', mapped.productAccountvaultActive);
    req.appendTemplatePath`/v1/locations/${mapped.locationId}/info`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseLocationInfoSchema, requestOptions);
  }
}
