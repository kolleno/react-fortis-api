/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ResponseThreeDSAuthentication,
  responseThreeDSAuthenticationSchema,
} from '../models/responseThreeDSAuthentication';
import {
  V1MerchantThreedsecureAuthenticationRequest,
  v1MerchantThreedsecureAuthenticationRequestSchema,
} from '../models/v1MerchantThreedsecureAuthenticationRequest';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';
import { ResponseError } from '../errors/responseError';

export class M3DSAuthenticationController extends BaseController {
  /**
   * Makes a 3DS Authentication request to authenticate a card or begin the challenge flow.  If a
   * challenge is required, a POST should be made to acs_url using the value of
   * base64_encoded_challenge_request for the value of "creq" using x-www-form-urlencoded for the
   * challenge request to the ACS.
   *
   * @param body
   * @return Response from the API call
   */
  async m3DSAuthenticationRequest(
    body: V1MerchantThreedsecureAuthenticationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseThreeDSAuthentication>> {
    const req = this.createRequest(
      'POST',
      '/v1/merchant/threedsecure/authentication'
    );
    const mapped = req.prepareArgs({
      body: [body, v1MerchantThreedsecureAuthenticationRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ResponseError, 'Bad Request');
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseThreeDSAuthenticationSchema, requestOptions);
  }
}
