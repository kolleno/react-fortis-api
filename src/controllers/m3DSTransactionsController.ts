/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ResponseThreeDSTransaction,
  responseThreeDSTransactionSchema,
} from '../models/responseThreeDSTransaction';
import { string } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';

export class M3DSTransactionsController extends BaseController {
  /**
   * For getting results of successful 3DS authentication attempts
   *
   * @param threeDsServerTransId     Universally unique transaction identifier assigned by the 3DS Server to
   *                                           identify a single transaction.
   * @param productTransactionId     Product Transaction ID associated with this 3DS request
   * @return Response from the API call
   */
  async m3DSTransactionsRequest(
    threeDsServerTransId: string,
    productTransactionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseThreeDSTransaction>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      threeDsServerTransId: [threeDsServerTransId, string()],
      productTransactionId: [productTransactionId, string()],
    });
    req.query('product_transaction_id', mapped.productTransactionId);
    req.appendTemplatePath`/v1/merchant/threedsecure/transactions/${mapped.threeDsServerTransId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseThreeDSTransactionSchema, requestOptions);
  }
}
