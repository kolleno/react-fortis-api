/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ResponseTransaction,
  responseTransactionSchema,
} from '../models/responseTransaction';
import {
  V1TransactionsCashRefundRequest,
  v1TransactionsCashRefundRequestSchema,
} from '../models/v1TransactionsCashRefundRequest';
import {
  V1TransactionsCashSaleRequest,
  v1TransactionsCashSaleRequestSchema,
} from '../models/v1TransactionsCashSaleRequest';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';

export class TransactionsCashController extends BaseController {
  /**
   * Create a new cash refund transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cashRefund(
    body: V1TransactionsCashRefundRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cash/refund');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCashRefundRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new cash sale transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cashSale(
    body: V1TransactionsCashSaleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cash/sale');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCashSaleRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }
}
