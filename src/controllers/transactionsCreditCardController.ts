/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Expand57Enum, expand57EnumSchema } from '../models/expand57Enum';
import {
  ResponseTransaction,
  responseTransactionSchema,
} from '../models/responseTransaction';
import {
  ResponseTransactionProcessing,
  responseTransactionProcessingSchema,
} from '../models/responseTransactionProcessing';
import {
  V1TransactionsCcAuthOnlyKeyedRequest,
  v1TransactionsCcAuthOnlyKeyedRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyKeyedRequest';
import {
  V1TransactionsCcAuthOnlyPrevTrxnRequest,
  v1TransactionsCcAuthOnlyPrevTrxnRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyPrevTrxnRequest';
import {
  V1TransactionsCcAuthOnlyTaptopayRequest,
  v1TransactionsCcAuthOnlyTaptopayRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyTaptopayRequest';
import {
  V1TransactionsCcAuthOnlyTerminalRequest,
  v1TransactionsCcAuthOnlyTerminalRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyTerminalRequest';
import {
  V1TransactionsCcAuthOnlyTicketRequest,
  v1TransactionsCcAuthOnlyTicketRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyTicketRequest';
import {
  V1TransactionsCcAuthOnlyTokenRequest,
  v1TransactionsCcAuthOnlyTokenRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyTokenRequest';
import {
  V1TransactionsCcAuthOnlyWalletRequest,
  v1TransactionsCcAuthOnlyWalletRequestSchema,
} from '../models/v1TransactionsCcAuthOnlyWalletRequest';
import {
  V1TransactionsCcAvsOnlyKeyedRequest,
  v1TransactionsCcAvsOnlyKeyedRequestSchema,
} from '../models/v1TransactionsCcAvsOnlyKeyedRequest';
import {
  V1TransactionsCcAvsOnlyPrevTrxnRequest,
  v1TransactionsCcAvsOnlyPrevTrxnRequestSchema,
} from '../models/v1TransactionsCcAvsOnlyPrevTrxnRequest';
import {
  V1TransactionsCcAvsOnlyTerminalRequest,
  v1TransactionsCcAvsOnlyTerminalRequestSchema,
} from '../models/v1TransactionsCcAvsOnlyTerminalRequest';
import {
  V1TransactionsCcAvsOnlyTicketRequest,
  v1TransactionsCcAvsOnlyTicketRequestSchema,
} from '../models/v1TransactionsCcAvsOnlyTicketRequest';
import {
  V1TransactionsCcAvsOnlyTokenRequest,
  v1TransactionsCcAvsOnlyTokenRequestSchema,
} from '../models/v1TransactionsCcAvsOnlyTokenRequest';
import {
  V1TransactionsCcAvsOnlyWalletRequest,
  v1TransactionsCcAvsOnlyWalletRequestSchema,
} from '../models/v1TransactionsCcAvsOnlyWalletRequest';
import {
  V1TransactionsCcBalanceInquiryKeyedRequest,
  v1TransactionsCcBalanceInquiryKeyedRequestSchema,
} from '../models/v1TransactionsCcBalanceInquiryKeyedRequest';
import {
  V1TransactionsCcBalanceInquiryPrevTrxnRequest,
  v1TransactionsCcBalanceInquiryPrevTrxnRequestSchema,
} from '../models/v1TransactionsCcBalanceInquiryPrevTrxnRequest';
import {
  V1TransactionsCcBalanceInquiryTerminalRequest,
  v1TransactionsCcBalanceInquiryTerminalRequestSchema,
} from '../models/v1TransactionsCcBalanceInquiryTerminalRequest';
import {
  V1TransactionsCcBalanceInquiryTicketRequest,
  v1TransactionsCcBalanceInquiryTicketRequestSchema,
} from '../models/v1TransactionsCcBalanceInquiryTicketRequest';
import {
  V1TransactionsCcBalanceInquiryTokenRequest,
  v1TransactionsCcBalanceInquiryTokenRequestSchema,
} from '../models/v1TransactionsCcBalanceInquiryTokenRequest';
import {
  V1TransactionsCcBalanceInquiryWalletRequest,
  v1TransactionsCcBalanceInquiryWalletRequestSchema,
} from '../models/v1TransactionsCcBalanceInquiryWalletRequest';
import {
  V1TransactionsCcForceKeyedRequest,
  v1TransactionsCcForceKeyedRequestSchema,
} from '../models/v1TransactionsCcForceKeyedRequest';
import {
  V1TransactionsCcForcePrevTrxnRequest,
  v1TransactionsCcForcePrevTrxnRequestSchema,
} from '../models/v1TransactionsCcForcePrevTrxnRequest';
import {
  V1TransactionsCcForceTicketRequest,
  v1TransactionsCcForceTicketRequestSchema,
} from '../models/v1TransactionsCcForceTicketRequest';
import {
  V1TransactionsCcForceTokenRequest,
  v1TransactionsCcForceTokenRequestSchema,
} from '../models/v1TransactionsCcForceTokenRequest';
import {
  V1TransactionsCcForceWalletRequest,
  v1TransactionsCcForceWalletRequestSchema,
} from '../models/v1TransactionsCcForceWalletRequest';
import {
  V1TransactionsCcRefundKeyedRequest,
  v1TransactionsCcRefundKeyedRequestSchema,
} from '../models/v1TransactionsCcRefundKeyedRequest';
import {
  V1TransactionsCcRefundPrevTrxnRequest,
  v1TransactionsCcRefundPrevTrxnRequestSchema,
} from '../models/v1TransactionsCcRefundPrevTrxnRequest';
import {
  V1TransactionsCcRefundTaptopayRequest,
  v1TransactionsCcRefundTaptopayRequestSchema,
} from '../models/v1TransactionsCcRefundTaptopayRequest';
import {
  V1TransactionsCcRefundTerminalRequest,
  v1TransactionsCcRefundTerminalRequestSchema,
} from '../models/v1TransactionsCcRefundTerminalRequest';
import {
  V1TransactionsCcRefundTicketRequest,
  v1TransactionsCcRefundTicketRequestSchema,
} from '../models/v1TransactionsCcRefundTicketRequest';
import {
  V1TransactionsCcRefundTokenRequest,
  v1TransactionsCcRefundTokenRequestSchema,
} from '../models/v1TransactionsCcRefundTokenRequest';
import {
  V1TransactionsCcRefundWalletRequest,
  v1TransactionsCcRefundWalletRequestSchema,
} from '../models/v1TransactionsCcRefundWalletRequest';
import {
  V1TransactionsCcSaleKeyedRequest,
  v1TransactionsCcSaleKeyedRequestSchema,
} from '../models/v1TransactionsCcSaleKeyedRequest';
import {
  V1TransactionsCcSalePrevTrxnRequest,
  v1TransactionsCcSalePrevTrxnRequestSchema,
} from '../models/v1TransactionsCcSalePrevTrxnRequest';
import {
  V1TransactionsCcSaleTaptopayRequest,
  v1TransactionsCcSaleTaptopayRequestSchema,
} from '../models/v1TransactionsCcSaleTaptopayRequest';
import {
  V1TransactionsCcSaleTerminalRequest,
  v1TransactionsCcSaleTerminalRequestSchema,
} from '../models/v1TransactionsCcSaleTerminalRequest';
import {
  V1TransactionsCcSaleTicketRequest,
  v1TransactionsCcSaleTicketRequestSchema,
} from '../models/v1TransactionsCcSaleTicketRequest';
import {
  V1TransactionsCcSaleTokenRequest,
  v1TransactionsCcSaleTokenRequestSchema,
} from '../models/v1TransactionsCcSaleTokenRequest';
import {
  V1TransactionsCcSaleWalletRequest,
  v1TransactionsCcSaleWalletRequestSchema,
} from '../models/v1TransactionsCcSaleWalletRequest';
import { array, optional } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';

export class TransactionsCreditCardController extends BaseController {
  /**
   * Create a new keyed Credit Card authorization only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                    retrieve extra data related to the current
   *                                                                    record being retrieved. For example, if the API
   *                                                                    request is for the accountvaults endpoint, and
   *                                                                    the end user also needs to know which contact
   *                                                                    the token belongs to, this data can be returned
   *                                                                    in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAuthOnly(
    body: V1TransactionsCcAuthOnlyKeyedRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/keyed'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyKeyedRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Credit Card authorization only transaction using previous transaction id
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                       retrieve extra data related to the current
   *                                                                       record being retrieved. For example, if the
   *                                                                       API request is for the accountvaults
   *                                                                       endpoint, and the end user also needs to
   *                                                                       know which contact the token belongs to,
   *                                                                       this data can be returned in the
   *                                                                       accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAuthOnlyPreviousTransaction(
    body: V1TransactionsCcAuthOnlyPrevTrxnRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/prev-trxn'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyPrevTrxnRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Tap To Pay Credit Card authorization only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                       retrieve extra data related to the current
   *                                                                       record being retrieved. For example, if the
   *                                                                       API request is for the accountvaults
   *                                                                       endpoint, and the end user also needs to
   *                                                                       know which contact the token belongs to,
   *                                                                       this data can be returned in the
   *                                                                       accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAuthOnlyTapToPay(
    body: V1TransactionsCcAuthOnlyTaptopayRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/taptopay'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyTaptopayRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new terminal Credit Card authorization only transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cCAuthOnlyTerminal(
    body: V1TransactionsCcAuthOnlyTerminalRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionProcessing>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/terminal'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyTerminalRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionProcessingSchema, requestOptions);
  }

  /**
   * Create a new ticket Credit Card authorization only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                     retrieve extra data related to the current
   *                                                                     record being retrieved. For example, if the
   *                                                                     API request is for the accountvaults endpoint,
   *                                                                     and the end user also needs to know which
   *                                                                     contact the token belongs to, this data can be
   *                                                                     returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAuthOnlyTicket(
    body: V1TransactionsCcAuthOnlyTicketRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/ticket'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyTicketRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new tokenized Credit Card authorization only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                    retrieve extra data related to the current
   *                                                                    record being retrieved. For example, if the API
   *                                                                    request is for the accountvaults endpoint, and
   *                                                                    the end user also needs to know which contact
   *                                                                    the token belongs to, this data can be returned
   *                                                                    in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAuthOnlyTokenized(
    body: V1TransactionsCcAuthOnlyTokenRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/token'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyTokenRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Wallet Credit Card authorization only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                     retrieve extra data related to the current
   *                                                                     record being retrieved. For example, if the
   *                                                                     API request is for the accountvaults endpoint,
   *                                                                     and the end user also needs to know which
   *                                                                     contact the token belongs to, this data can be
   *                                                                     returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAuthOnlyWallet(
    body: V1TransactionsCcAuthOnlyWalletRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/auth-only/wallet'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAuthOnlyWalletRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new keyed Credit Card AVS only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                   retrieve extra data related to the current
   *                                                                   record being retrieved. For example, if the API
   *                                                                   request is for the accountvaults endpoint, and
   *                                                                   the end user also needs to know which contact
   *                                                                   the token belongs to, this data can be returned
   *                                                                   in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAVS(
    body: V1TransactionsCcAvsOnlyKeyedRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/avs-only/keyed'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAvsOnlyKeyedRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Credit Card AVS only transaction using previous transaction id
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                      retrieve extra data related to the current
   *                                                                      record being retrieved. For example, if the
   *                                                                      API request is for the accountvaults endpoint,
   *                                                                      and the end user also needs to know which
   *                                                                      contact the token belongs to, this data can
   *                                                                      be returned in the accountvaults endpoint
   *                                                                      request.
   * @return Response from the API call
   */
  async cCAVSPreviousTransaction(
    body: V1TransactionsCcAvsOnlyPrevTrxnRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/avs-only/prev-trxn'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAvsOnlyPrevTrxnRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new terminal Credit Card AVS only transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cCAVSTerminal(
    body: V1TransactionsCcAvsOnlyTerminalRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionProcessing>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/avs-only/terminal'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAvsOnlyTerminalRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionProcessingSchema, requestOptions);
  }

  /**
   * Create a new ticket Credit Card AVS only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                    retrieve extra data related to the current
   *                                                                    record being retrieved. For example, if the API
   *                                                                    request is for the accountvaults endpoint, and
   *                                                                    the end user also needs to know which contact
   *                                                                    the token belongs to, this data can be returned
   *                                                                    in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAVSTicket(
    body: V1TransactionsCcAvsOnlyTicketRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/avs-only/ticket'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAvsOnlyTicketRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new tokenized Credit Card AVS only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                   retrieve extra data related to the current
   *                                                                   record being retrieved. For example, if the API
   *                                                                   request is for the accountvaults endpoint, and
   *                                                                   the end user also needs to know which contact
   *                                                                   the token belongs to, this data can be returned
   *                                                                   in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAVSTokenized(
    body: V1TransactionsCcAvsOnlyTokenRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/avs-only/token'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAvsOnlyTokenRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Wallet Credit Card AVS only transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                    retrieve extra data related to the current
   *                                                                    record being retrieved. For example, if the API
   *                                                                    request is for the accountvaults endpoint, and
   *                                                                    the end user also needs to know which contact
   *                                                                    the token belongs to, this data can be returned
   *                                                                    in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCAVSWallet(
    body: V1TransactionsCcAvsOnlyWalletRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/avs-only/wallet'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcAvsOnlyWalletRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new keyed Credit Card balance inquiry transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                          retrieve extra data related to the
   *                                                                          current record being retrieved. For
   *                                                                          example, if the API request is for the
   *                                                                          accountvaults endpoint, and the end user
   *                                                                          also needs to know which contact the
   *                                                                          token belongs to, this data can be
   *                                                                          returned in the accountvaults endpoint
   *                                                                          request.
   * @return Response from the API call
   */
  async cCBalanceInquiry(
    body: V1TransactionsCcBalanceInquiryKeyedRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/balance-inquiry/keyed'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcBalanceInquiryKeyedRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Credit Card balance inquiry transaction using previous transaction id
   *
   * @param body
   * @param expand       Most endpoints in the API have a way
   *                                                                             to retrieve extra data related to the
   *                                                                             current record being retrieved. For
   *                                                                             example, if the API request is for the
   *                                                                             accountvaults endpoint, and the end
   *                                                                             user also needs to know which contact
   *                                                                             the token belongs to, this data can be
   *                                                                             returned in the accountvaults endpoint
   *                                                                             request.
   * @return Response from the API call
   */
  async cCBalanceInquiryPreviousTransaction(
    body: V1TransactionsCcBalanceInquiryPrevTrxnRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/balance-inquiry/prev-trxn'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcBalanceInquiryPrevTrxnRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new terminal Credit Card balance inquiry transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cCBalanceInquiryTerminal(
    body: V1TransactionsCcBalanceInquiryTerminalRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionProcessing>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/balance-inquiry/terminal'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcBalanceInquiryTerminalRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionProcessingSchema, requestOptions);
  }

  /**
   * Create a new Ticket Credit Card balance inquiry transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                           retrieve extra data related to the
   *                                                                           current record being retrieved. For
   *                                                                           example, if the API request is for the
   *                                                                           accountvaults endpoint, and the end user
   *                                                                           also needs to know which contact the
   *                                                                           token belongs to, this data can be
   *                                                                           returned in the accountvaults endpoint
   *                                                                           request.
   * @return Response from the API call
   */
  async cCBalanceInquiryTicket(
    body: V1TransactionsCcBalanceInquiryTicketRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/balance-inquiry/ticket'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcBalanceInquiryTicketRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new tokenized Credit Card balance inquiry transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                          retrieve extra data related to the
   *                                                                          current record being retrieved. For
   *                                                                          example, if the API request is for the
   *                                                                          accountvaults endpoint, and the end user
   *                                                                          also needs to know which contact the
   *                                                                          token belongs to, this data can be
   *                                                                          returned in the accountvaults endpoint
   *                                                                          request.
   * @return Response from the API call
   */
  async cCBalanceInquiryTokenized(
    body: V1TransactionsCcBalanceInquiryTokenRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/balance-inquiry/token'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcBalanceInquiryTokenRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Wallet Credit Card balance inquiry transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                           retrieve extra data related to the
   *                                                                           current record being retrieved. For
   *                                                                           example, if the API request is for the
   *                                                                           accountvaults endpoint, and the end user
   *                                                                           also needs to know which contact the
   *                                                                           token belongs to, this data can be
   *                                                                           returned in the accountvaults endpoint
   *                                                                           request.
   * @return Response from the API call
   */
  async cCBalanceInquiryWallet(
    body: V1TransactionsCcBalanceInquiryWalletRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/balance-inquiry/wallet'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcBalanceInquiryWalletRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new keyed Credit Card force transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                 extra data related to the current record being
   *                                                                 retrieved. For example, if the API request is for
   *                                                                 the accountvaults endpoint, and the end user also
   *                                                                 needs to know which contact the token belongs to,
   *                                                                 this data can be returned in the accountvaults
   *                                                                 endpoint request.
   * @return Response from the API call
   */
  async cCForce(
    body: V1TransactionsCcForceKeyedRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/force/keyed');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcForceKeyedRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Credit Card force transaction using previous transaction id
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                    retrieve extra data related to the current
   *                                                                    record being retrieved. For example, if the API
   *                                                                    request is for the accountvaults endpoint, and
   *                                                                    the end user also needs to know which contact
   *                                                                    the token belongs to, this data can be returned
   *                                                                    in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCForcePreviousTransaction(
    body: V1TransactionsCcForcePrevTrxnRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/force/prev-trxn'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcForcePrevTrxnRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new ticket Credit Card force transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                  extra data related to the current record being
   *                                                                  retrieved. For example, if the API request is for
   *                                                                  the accountvaults endpoint, and the end user also
   *                                                                  needs to know which contact the token belongs to,
   *                                                                  this data can be returned in the accountvaults
   *                                                                  endpoint request.
   * @return Response from the API call
   */
  async cCForceTicket(
    body: V1TransactionsCcForceTicketRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/force/ticket');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcForceTicketRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new tokenized Credit Card force transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                 extra data related to the current record being
   *                                                                 retrieved. For example, if the API request is for
   *                                                                 the accountvaults endpoint, and the end user also
   *                                                                 needs to know which contact the token belongs to,
   *                                                                 this data can be returned in the accountvaults
   *                                                                 endpoint request.
   * @return Response from the API call
   */
  async cCForceTokenized(
    body: V1TransactionsCcForceTokenRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/force/token');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcForceTokenRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Wallet Credit Card force transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                  extra data related to the current record being
   *                                                                  retrieved. For example, if the API request is for
   *                                                                  the accountvaults endpoint, and the end user also
   *                                                                  needs to know which contact the token belongs to,
   *                                                                  this data can be returned in the accountvaults
   *                                                                  endpoint request.
   * @return Response from the API call
   */
  async cCForceWallet(
    body: V1TransactionsCcForceWalletRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/force/wallet');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcForceWalletRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new keyed Credit Card refund transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                  extra data related to the current record being
   *                                                                  retrieved. For example, if the API request is for
   *                                                                  the accountvaults endpoint, and the end user also
   *                                                                  needs to know which contact the token belongs to,
   *                                                                  this data can be returned in the accountvaults
   *                                                                  endpoint request.
   * @return Response from the API call
   */
  async cCRefund(
    body: V1TransactionsCcRefundKeyedRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/refund/keyed');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundKeyedRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Credit Card refund transaction using previous transaction id
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                     retrieve extra data related to the current
   *                                                                     record being retrieved. For example, if the
   *                                                                     API request is for the accountvaults endpoint,
   *                                                                     and the end user also needs to know which
   *                                                                     contact the token belongs to, this data can be
   *                                                                     returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCRefundPreviousTransaction(
    body: V1TransactionsCcRefundPrevTrxnRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/refund/prev-trxn'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundPrevTrxnRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Tap To Pay Credit Card refund transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                     retrieve extra data related to the current
   *                                                                     record being retrieved. For example, if the
   *                                                                     API request is for the accountvaults endpoint,
   *                                                                     and the end user also needs to know which
   *                                                                     contact the token belongs to, this data can be
   *                                                                     returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCRefundTapToPay(
    body: V1TransactionsCcRefundTaptopayRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/refund/taptopay'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundTaptopayRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new terminal Credit Card refund transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cCRefundTerminal(
    body: V1TransactionsCcRefundTerminalRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionProcessing>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/refund/terminal'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundTerminalRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionProcessingSchema, requestOptions);
  }

  /**
   * Create a new ticket Credit Card refund transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                   retrieve extra data related to the current
   *                                                                   record being retrieved. For example, if the API
   *                                                                   request is for the accountvaults endpoint, and
   *                                                                   the end user also needs to know which contact
   *                                                                   the token belongs to, this data can be returned
   *                                                                   in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCRefundTicket(
    body: V1TransactionsCcRefundTicketRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/refund/ticket');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundTicketRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new tokenized Credit Card refund transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                  extra data related to the current record being
   *                                                                  retrieved. For example, if the API request is for
   *                                                                  the accountvaults endpoint, and the end user also
   *                                                                  needs to know which contact the token belongs to,
   *                                                                  this data can be returned in the accountvaults
   *                                                                  endpoint request.
   * @return Response from the API call
   */
  async cCRefundTokenized(
    body: V1TransactionsCcRefundTokenRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/refund/token');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundTokenRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Wallet Credit Card refund transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                   retrieve extra data related to the current
   *                                                                   record being retrieved. For example, if the API
   *                                                                   request is for the accountvaults endpoint, and
   *                                                                   the end user also needs to know which contact
   *                                                                   the token belongs to, this data can be returned
   *                                                                   in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCRefundWallet(
    body: V1TransactionsCcRefundWalletRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/refund/wallet');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcRefundWalletRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new keyed Credit Card sale transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                extra data related to the current record being
   *                                                                retrieved. For example, if the API request is for
   *                                                                the accountvaults endpoint, and the end user also
   *                                                                needs to know which contact the token belongs to,
   *                                                                this data can be returned in the accountvaults
   *                                                                endpoint request.
   * @return Response from the API call
   */
  async cCSale(
    body: V1TransactionsCcSaleKeyedRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/sale/keyed');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSaleKeyedRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Credit Card sale transaction using previous transaction id
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                   retrieve extra data related to the current
   *                                                                   record being retrieved. For example, if the API
   *                                                                   request is for the accountvaults endpoint, and
   *                                                                   the end user also needs to know which contact
   *                                                                   the token belongs to, this data can be returned
   *                                                                   in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCSalePreviousTransaction(
    body: V1TransactionsCcSalePrevTrxnRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest(
      'POST',
      '/v1/transactions/cc/sale/prev-trxn'
    );
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSalePrevTrxnRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Tap To Pay Credit card sale transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to
   *                                                                   retrieve extra data related to the current
   *                                                                   record being retrieved. For example, if the API
   *                                                                   request is for the accountvaults endpoint, and
   *                                                                   the end user also needs to know which contact
   *                                                                   the token belongs to, this data can be returned
   *                                                                   in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async cCSaleTapToPay(
    body: V1TransactionsCcSaleTaptopayRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/sale/taptopay');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSaleTaptopayRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new terminal Credit Card sale transaction
   *
   * @param body
   * @return Response from the API call
   */
  async cCSaleTerminal(
    body: V1TransactionsCcSaleTerminalRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransactionProcessing>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/sale/terminal');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSaleTerminalRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionProcessingSchema, requestOptions);
  }

  /**
   * Create a new Ticket Credit Card sale transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                 extra data related to the current record being
   *                                                                 retrieved. For example, if the API request is for
   *                                                                 the accountvaults endpoint, and the end user also
   *                                                                 needs to know which contact the token belongs to,
   *                                                                 this data can be returned in the accountvaults
   *                                                                 endpoint request.
   * @return Response from the API call
   */
  async cCSaleTicket(
    body: V1TransactionsCcSaleTicketRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/sale/ticket');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSaleTicketRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new tokenized Credit Card sale transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                extra data related to the current record being
   *                                                                retrieved. For example, if the API request is for
   *                                                                the accountvaults endpoint, and the end user also
   *                                                                needs to know which contact the token belongs to,
   *                                                                this data can be returned in the accountvaults
   *                                                                endpoint request.
   * @return Response from the API call
   */
  async cCSaleTokenized(
    body: V1TransactionsCcSaleTokenRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/sale/token');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSaleTokenRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }

  /**
   * Create a new Wallet Credit Card sale transaction
   *
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                                 extra data related to the current record being
   *                                                                 retrieved. For example, if the API request is for
   *                                                                 the accountvaults endpoint, and the end user also
   *                                                                 needs to know which contact the token belongs to,
   *                                                                 this data can be returned in the accountvaults
   *                                                                 endpoint request.
   * @return Response from the API call
   */
  async cCSaleWallet(
    body: V1TransactionsCcSaleWalletRequest,
    expand?: Expand57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseTransaction>> {
    const req = this.createRequest('POST', '/v1/transactions/cc/sale/wallet');
    const mapped = req.prepareArgs({
      body: [body, v1TransactionsCcSaleWalletRequestSchema],
      expand: [expand, optional(array(expand57EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseTransactionSchema, requestOptions);
  }
}
