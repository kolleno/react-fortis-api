/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Expand114Enum, expand114EnumSchema } from '../models/expand114Enum';
import {
  ResponseWebhook,
  responseWebhookSchema,
} from '../models/responseWebhook';
import {
  V1WebhooksBatchRequest,
  v1WebhooksBatchRequestSchema,
} from '../models/v1WebhooksBatchRequest';
import {
  V1WebhooksBatchRequest1,
  v1WebhooksBatchRequest1Schema,
} from '../models/v1WebhooksBatchRequest1';
import {
  V1WebhooksContactRequest,
  v1WebhooksContactRequestSchema,
} from '../models/v1WebhooksContactRequest';
import {
  V1WebhooksContactRequest1,
  v1WebhooksContactRequest1Schema,
} from '../models/v1WebhooksContactRequest1';
import {
  V1WebhooksTransactionRequest,
  v1WebhooksTransactionRequestSchema,
} from '../models/v1WebhooksTransactionRequest';
import {
  V1WebhooksTransactionRequest1,
  v1WebhooksTransactionRequest1Schema,
} from '../models/v1WebhooksTransactionRequest1';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';

export class WebhooksController extends BaseController {
  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                      related to the current record being retrieved. For example,
   *                                                      if the API request is for the accountvaults endpoint, and the
   *                                                      end user also needs to know which contact the token belongs
   *                                                      to, this data can be returned in the accountvaults endpoint
   *                                                      request.
   * @return Response from the API call
   */
  async createANewTransactionBatchPostbackConfig(
    body: V1WebhooksBatchRequest,
    expand?: Expand114Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('POST', '/v1/webhooks/batch');
    const mapped = req.prepareArgs({
      body: [body, v1WebhooksBatchRequestSchema],
      expand: [expand, optional(array(expand114EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra
   *                                                        data related to the current record being retrieved. For
   *                                                        example, if the API request is for the accountvaults
   *                                                        endpoint, and the end user also needs to know which contact
   *                                                        the token belongs to, this data can be returned in the
   *                                                        accountvaults endpoint request.
   * @return Response from the API call
   */
  async createANewContactPostbackConfig(
    body: V1WebhooksContactRequest,
    expand?: Expand114Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('POST', '/v1/webhooks/contact');
    const mapped = req.prepareArgs({
      body: [body, v1WebhooksContactRequestSchema],
      expand: [expand, optional(array(expand114EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra
   *                                                            data related to the current record being retrieved. For
   *                                                            example, if the API request is for the accountvaults
   *                                                            endpoint, and the end user also needs to know which
   *                                                            contact the token belongs to, this data can be returned
   *                                                            in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async createANewTransactionPostbackConfig(
    body: V1WebhooksTransactionRequest,
    expand?: Expand114Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('POST', '/v1/webhooks/transaction');
    const mapped = req.prepareArgs({
      body: [body, v1WebhooksTransactionRequestSchema],
      expand: [expand, optional(array(expand114EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }

  /**
   * @param webhookId  Postback Config ID
   * @return Response from the API call
   */
  async deleteAPostbackConfig(
    webhookId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ webhookId: [webhookId, string()] });
    req.appendTemplatePath`/v1/webhooks/${mapped.webhookId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }

  /**
   * @param webhookId    Postback Config ID
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data
   *                                                       related to the current record being retrieved. For example,
   *                                                       if the API request is for the accountvaults endpoint, and
   *                                                       the end user also needs to know which contact the token
   *                                                       belongs to, this data can be returned in the accountvaults
   *                                                       endpoint request.
   * @return Response from the API call
   */
  async updateTransactionBatchPostbackConfig(
    webhookId: string,
    body: V1WebhooksBatchRequest1,
    expand?: Expand114Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      webhookId: [webhookId, string()],
      body: [body, v1WebhooksBatchRequest1Schema],
      expand: [expand, optional(array(expand114EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/webhooks/${mapped.webhookId}/batch`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }

  /**
   * @param webhookId    Postback Config ID
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra
   *                                                         data related to the current record being retrieved. For
   *                                                         example, if the API request is for the accountvaults
   *                                                         endpoint, and the end user also needs to know which
   *                                                         contact the token belongs to, this data can be returned in
   *                                                         the accountvaults endpoint request.
   * @return Response from the API call
   */
  async updateContactPostbackConfig(
    webhookId: string,
    body: V1WebhooksContactRequest1,
    expand?: Expand114Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      webhookId: [webhookId, string()],
      body: [body, v1WebhooksContactRequest1Schema],
      expand: [expand, optional(array(expand114EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/webhooks/${mapped.webhookId}/contact`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }

  /**
   * @param webhookId    Postback Config ID
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve
   *                                                             extra data related to the current record being
   *                                                             retrieved. For example, if the API request is for the
   *                                                             accountvaults endpoint, and the end user also needs to
   *                                                             know which contact the token belongs to, this data can
   *                                                             be returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async updateTransactionPostbackConfig(
    webhookId: string,
    body: V1WebhooksTransactionRequest1,
    expand?: Expand114Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseWebhook>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      webhookId: [webhookId, string()],
      body: [body, v1WebhooksTransactionRequest1Schema],
      expand: [expand, optional(array(expand114EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/webhooks/${mapped.webhookId}/transaction`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseWebhookSchema, requestOptions);
  }
}
