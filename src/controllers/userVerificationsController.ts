/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Field56Enum, field56EnumSchema } from '../models/field56Enum';
import { FilterBy, filterBySchema } from '../models/filterBy';
import { Format1Enum, format1EnumSchema } from '../models/format1Enum';
import { Order20, order20Schema } from '../models/order20';
import { Page, pageSchema } from '../models/page';
import {
  ResponseUserVerification,
  responseUserVerificationSchema,
} from '../models/responseUserVerification';
import {
  ResponseUserVerificationsCollection,
  responseUserVerificationsCollectionSchema,
} from '../models/responseUserVerificationsCollection';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';

export class UserVerificationsController extends BaseController {
  /**
   * Get user verification
   *
   * @param userVerificationId
   * @return Response from the API call
   */
  async getUserVerification(
    userVerificationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUserVerification>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      userVerificationId: [userVerificationId, string()],
    });
    req.appendTemplatePath`/v1/user-verifications/${mapped.userVerificationId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserVerificationSchema, requestOptions);
  }

  /**
   * List user verifications
   *
   * @param page       Use this field to specify paginate your results, by using page size and number.
   *                                    You can use one of the following methods: >/endpoint?page={ "number": 1,
   *                                    "size": 50 } > >/endpoint?page[number]=1&page[size]=50 >
   * @param order      Criteria used in query string parameters to order results.  Most fields from
   *                                    the endpoint results can be used as a `key`.  Unsupported fields or operators
   *                                    will return a `412`.  Must be encoded, or use syntax that does not require
   *                                    encoding. >/endpoint?order[0][key]=created_ts&order[0][operator]=asc >
   *                                    >/endpoint?order=[{ "key": "created_ts", "operator": "asc"}] > >/endpoint?
   *                                    order=[{ "key": "balance", "operator": "desc"},{ "key": "created_ts",
   *                                    "operator": "asc"}] >
   * @param filterBy   Filter criteria that can be used in query string parameters.  Most fields from
   *                                    the endpoint results can be used as a `key`.  Unsupported fields or operators
   *                                    will return a `412`. Must be encoded, or use syntax that does not require
   *                                    encoding. >?
   *                                    filter_by[0][key]=first_name&filter_by[0][operator]==&filter_by[0][value]=Steve
   *                                    > >/endpoint?filter_by=[{ "key": "first_name", "operator": "=", "value": "Fred"
   *                                    }] > >/endpoint?filter_by=[{ "key": "account_type", "operator": "=", "value":
   *                                    "VISA" }] > >/endpoint?filter_by=[{ "key": "created_ts", "operator": ">=",
   *                                    "value": "946702799" }, { "key": "created_ts", "operator": "<=", value:
   *                                    "1695061891" }] > >/endpoint?filter_by=[{ "key": "last_name", "operator": "IN",
   *                                    "value": "Williams,Brown,Allman" }] >
   * @param expand     Most endpoints in the API have a way to retrieve extra data related to the
   *                                    current record being retrieved. For example, if the API request is for the
   *                                    accountvaults endpoint, and the end user also needs to know which contact the
   *                                    token belongs to, this data can be returned in the accountvaults endpoint
   *                                    request.
   * @param format     Reporting format, valid values: csv, tsv
   * @param typeahead  You can use any `field_name` from this endpoint results to order the list
   *                                    using the value provided as filter for the same `field_name`. It will be
   *                                    ordered using the following rules: 1) Exact match, 2) Starts with, 3) Contains.
   *                                    >/endpoint?filter={ "field_name": "Value" }&_typeahead=field_name >
   * @param fields     You can use any `field_name` from this endpoint results to filter the list of
   *                                    fields returned on the response.
   * @return Response from the API call
   */
  async listUserVerifications(
    page?: Page,
    order?: Order20[],
    filterBy?: FilterBy[],
    expand?: string[],
    format?: Format1Enum,
    typeahead?: string,
    fields?: Field56Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUserVerificationsCollection>> {
    const req = this.createRequest('GET', '/v1/user-verifications');
    const mapped = req.prepareArgs({
      page: [page, optional(pageSchema)],
      order: [order, optional(array(order20Schema))],
      filterBy: [filterBy, optional(array(filterBySchema))],
      expand: [expand, optional(array(string()))],
      format: [format, optional(format1EnumSchema)],
      typeahead: [typeahead, optional(string())],
      fields: [fields, optional(array(field56EnumSchema))],
    });
    req.query('page', mapped.page);
    req.query('order', mapped.order);
    req.query('filter_by', mapped.filterBy);
    req.query('expand', mapped.expand);
    req.query('_format', mapped.format);
    req.query('_typeahead', mapped.typeahead);
    req.query('fields', mapped.fields);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(
      responseUserVerificationsCollectionSchema,
      requestOptions
    );
  }
}
