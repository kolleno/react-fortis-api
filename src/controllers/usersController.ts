/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Expand108Enum, expand108EnumSchema } from '../models/expand108Enum';
import { Field57Enum, field57EnumSchema } from '../models/field57Enum';
import { FilterBy, filterBySchema } from '../models/filterBy';
import { Format1Enum, format1EnumSchema } from '../models/format1Enum';
import { Order20, order20Schema } from '../models/order20';
import { Page, pageSchema } from '../models/page';
import {
  ResponseRemoveVerification,
  responseRemoveVerificationSchema,
} from '../models/responseRemoveVerification';
import {
  ResponseSendVerification,
  responseSendVerificationSchema,
} from '../models/responseSendVerification';
import { ResponseUser, responseUserSchema } from '../models/responseUser';
import {
  ResponseUserApiKey,
  responseUserApiKeySchema,
} from '../models/responseUserApiKey';
import {
  ResponseUsersCollection,
  responseUsersCollectionSchema,
} from '../models/responseUsersCollection';
import { V1UsersRequest, v1UsersRequestSchema } from '../models/v1UsersRequest';
import {
  V1UsersRequest1,
  v1UsersRequest1Schema,
} from '../models/v1UsersRequest1';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { Response401tokenError } from '../errors/response401tokenError';
import { Response412Error } from '../errors/response412Error';

export class UsersController extends BaseController {
  /**
   * @param userId  User ID
   * @param expand  Most endpoints in the API have a way to retrieve extra data related to the
   *                                   current record being retrieved. For example, if the API request is for the
   *                                   accountvaults endpoint, and the end user also needs to know which contact the
   *                                   token belongs to, this data can be returned in the accountvaults endpoint
   *                                   request.
   * @return Response from the API call
   */
  async createANewAPIKey(
    userId: string,
    expand?: Expand108Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUserApiKey>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      expand: [expand, optional(array(expand108EnumSchema))],
    });
    req.query('expand', mapped.expand);
    req.appendTemplatePath`/v1/users/${mapped.userId}/api-key`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserApiKeySchema, requestOptions);
  }

  /**
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data related
   *                                              to the current record being retrieved. For example, if the API
   *                                              request is for the accountvaults endpoint, and the end user also
   *                                              needs to know which contact the token belongs to, this data can be
   *                                              returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async createANewUser(
    body: V1UsersRequest,
    expand?: Expand108Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUser>> {
    const req = this.createRequest('POST', '/v1/users');
    const mapped = req.prepareArgs({
      body: [body, v1UsersRequestSchema],
      expand: [expand, optional(array(expand108EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserSchema, requestOptions);
  }

  /**
   * @param page       Use this field to specify paginate your results, by using page size and
   *                                      number. You can use one of the following methods: >/endpoint?page={ "number":
   *                                      1, "size": 50 } > >/endpoint?page[number]=1&page[size]=50 >
   * @param order      Criteria used in query string parameters to order results.  Most fields from
   *                                      the endpoint results can be used as a `key`.  Unsupported fields or operators
   *                                      will return a `412`.  Must be encoded, or use syntax that does not require
   *                                      encoding. >/endpoint?order[0][key]=created_ts&order[0][operator]=asc >
   *                                      >/endpoint?order=[{ "key": "created_ts", "operator": "asc"}] > >/endpoint?
   *                                      order=[{ "key": "balance", "operator": "desc"},{ "key": "created_ts",
   *                                      "operator": "asc"}] >
   * @param filterBy   Filter criteria that can be used in query string parameters.  Most fields
   *                                      from the endpoint results can be used as a `key`.  Unsupported fields or
   *                                      operators will return a `412`. Must be encoded, or use syntax that does not
   *                                      require encoding. >?
   *                                      filter_by[0][key]=first_name&filter_by[0][operator]==&filter_by[0][value]=Ste
   *                                      ve > >/endpoint?filter_by=[{ "key": "first_name", "operator": "=", "value":
   *                                      "Fred" }] > >/endpoint?filter_by=[{ "key": "account_type", "operator": "=",
   *                                      "value": "VISA" }] > >/endpoint?filter_by=[{ "key": "created_ts", "operator":
   *                                      ">=", "value": "946702799" }, { "key": "created_ts", "operator": "<=", value:
   *                                      "1695061891" }] > >/endpoint?filter_by=[{ "key": "last_name", "operator":
   *                                      "IN", "value": "Williams,Brown,Allman" }] >
   * @param expand     Most endpoints in the API have a way to retrieve extra data related to the
   *                                      current record being retrieved. For example, if the API request is for the
   *                                      accountvaults endpoint, and the end user also needs to know which contact the
   *                                      token belongs to, this data can be returned in the accountvaults endpoint
   *                                      request.
   * @param format     Reporting format, valid values: csv, tsv
   * @param typeahead  You can use any `field_name` from this endpoint results to order the list
   *                                      using the value provided as filter for the same `field_name`. It will be
   *                                      ordered using the following rules: 1) Exact match, 2) Starts with, 3)
   *                                      Contains. >/endpoint?filter={ "field_name": "Value" }&_typeahead=field_name
   *                                      >
   * @param fields     You can use any `field_name` from this endpoint results to filter the list
   *                                      of fields returned on the response.
   * @return Response from the API call
   */
  async listAllUser(
    page?: Page,
    order?: Order20[],
    filterBy?: FilterBy[],
    expand?: Expand108Enum[],
    format?: Format1Enum,
    typeahead?: string,
    fields?: Field57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUsersCollection>> {
    const req = this.createRequest('GET', '/v1/users');
    const mapped = req.prepareArgs({
      page: [page, optional(pageSchema)],
      order: [order, optional(array(order20Schema))],
      filterBy: [filterBy, optional(array(filterBySchema))],
      expand: [expand, optional(array(expand108EnumSchema))],
      format: [format, optional(format1EnumSchema)],
      typeahead: [typeahead, optional(string())],
      fields: [fields, optional(array(field57EnumSchema))],
    });
    req.query('page', mapped.page);
    req.query('order', mapped.order);
    req.query('filter_by', mapped.filterBy);
    req.query('expand', mapped.expand);
    req.query('_format', mapped.format);
    req.query('_typeahead', mapped.typeahead);
    req.query('fields', mapped.fields);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUsersCollectionSchema, requestOptions);
  }

  /**
   * @param userId  User ID
   * @return Response from the API call
   */
  async deleteAUserRecord(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUser>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/v1/users/${mapped.userId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserSchema, requestOptions);
  }

  /**
   * @param userId  User ID
   * @param expand  Most endpoints in the API have a way to retrieve extra data related to the
   *                                   current record being retrieved. For example, if the API request is for the
   *                                   accountvaults endpoint, and the end user also needs to know which contact the
   *                                   token belongs to, this data can be returned in the accountvaults endpoint
   *                                   request.
   * @param fields  You can use any `field_name` from this endpoint results to filter the list of
   *                                   fields returned on the response.
   * @return Response from the API call
   */
  async viewSingleUserRecord(
    userId: string,
    expand?: Expand108Enum[],
    fields?: Field57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUser>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      expand: [expand, optional(array(expand108EnumSchema))],
      fields: [fields, optional(array(field57EnumSchema))],
    });
    req.query('expand', mapped.expand);
    req.query('fields', mapped.fields);
    req.appendTemplatePath`/v1/users/${mapped.userId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserSchema, requestOptions);
  }

  /**
   * @param userId       User ID
   * @param body
   * @param expand       Most endpoints in the API have a way to retrieve extra data related
   *                                               to the current record being retrieved. For example, if the API
   *                                               request is for the accountvaults endpoint, and the end user also
   *                                               needs to know which contact the token belongs to, this data can be
   *                                               returned in the accountvaults endpoint request.
   * @return Response from the API call
   */
  async updateAUserRecord(
    userId: string,
    body: V1UsersRequest1,
    expand?: Expand108Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUser>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      body: [body, v1UsersRequest1Schema],
      expand: [expand, optional(array(expand108EnumSchema))],
    });
    req.header('Content-Type', 'application/json');
    req.query('expand', mapped.expand);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/users/${mapped.userId}`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.throwOn(412, Response412Error, 'Precondition Failed');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserSchema, requestOptions);
  }

  /**
   * @param expand Most endpoints in the API have a way to retrieve extra data related to the
   *                                  current record being retrieved. For example, if the API request is for the
   *                                  accountvaults endpoint, and the end user also needs to know which contact the
   *                                  token belongs to, this data can be returned in the accountvaults endpoint request.
   * @param fields You can use any `field_name` from this endpoint results to filter the list of
   *                                  fields returned on the response.
   * @return Response from the API call
   */
  async viewSelfRecord(
    expand?: Expand108Enum[],
    fields?: Field57Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseUser>> {
    const req = this.createRequest('GET', '/v1/users/me');
    const mapped = req.prepareArgs({
      expand: [expand, optional(array(expand108EnumSchema))],
      fields: [fields, optional(array(field57EnumSchema))],
    });
    req.query('expand', mapped.expand);
    req.query('fields', mapped.fields);
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseUserSchema, requestOptions);
  }

  /**
   * Remove the pending user
   *
   * @param userId
   * @return Response from the API call
   */
  async removeVerification(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseRemoveVerification>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/v1/users/${mapped.userId}/remove-verification`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseRemoveVerificationSchema, requestOptions);
  }

  /**
   * Send an verification email to the pending user
   *
   * @param userId
   * @return Response from the API call
   */
  async sendVerification(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseSendVerification>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/v1/users/${mapped.userId}/send-verification`;
    req.throwOn(401, Response401tokenError, 'Unauthorized');
    req.authenticate([{ userId: true, userApiKey: true, developerId: true }]);
    return req.callAsJson(responseSendVerificationSchema, requestOptions);
  }
}
