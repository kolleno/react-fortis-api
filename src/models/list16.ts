/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  expandoObject,
  lazy,
  nullable,
  number,
  optional,
  Schema,
  string,
} from '../schema';
import { Changelog, changelogSchema } from './changelog';
import { CreatedUser, createdUserSchema } from './createdUser';
import {
  RejectedTransaction,
  rejectedTransactionSchema,
} from './rejectedTransaction';
import { RetryTransaction, retryTransactionSchema } from './retryTransaction';
import {
  ReturnFeeTransaction,
  returnFeeTransactionSchema,
} from './returnFeeTransaction';

export interface List16 {
  /** Rejected Transaction ID. */
  rejectedTransactionId?: string;
  /** Return Fee. */
  returnFee?: number | null;
  /** Transaction ACH Retry ID. */
  id?: string;
  /** Retry Transaction ID. */
  retryTransactionId?: string;
  /** Return Fee Transaction ID. */
  returnFeeTransactionId?: string;
  /** Created Time Stamp */
  createdTs?: number;
  /** User ID Created the register */
  createdUserId?: string;
  /** Transaction Information on `expand` */
  rejectedTransaction?: RejectedTransaction;
  /** Transaction Information on `expand` */
  retryTransaction?: RetryTransaction;
  /** Transaction Information on `expand` */
  returnFeeTransaction?: ReturnFeeTransaction;
  /** User Information on `expand` */
  createdUser?: CreatedUser;
  /** Changelog Information on `expand` */
  changelogs?: Changelog[];
  [key: string]: unknown;
}

export const list16Schema: Schema<List16> = expandoObject({
  rejectedTransactionId: ['rejected_transaction_id', optional(string())],
  returnFee: ['return_fee', optional(nullable(number()))],
  id: ['id', optional(string())],
  retryTransactionId: ['retry_transaction_id', optional(string())],
  returnFeeTransactionId: ['return_fee_transaction_id', optional(string())],
  createdTs: ['created_ts', optional(number())],
  createdUserId: ['created_user_id', optional(string())],
  rejectedTransaction: [
    'rejected_transaction',
    optional(lazy(() => rejectedTransactionSchema)),
  ],
  retryTransaction: [
    'retry_transaction',
    optional(lazy(() => retryTransactionSchema)),
  ],
  returnFeeTransaction: [
    'return_fee_transaction',
    optional(lazy(() => returnFeeTransactionSchema)),
  ],
  createdUser: ['created_user', optional(lazy(() => createdUserSchema))],
  changelogs: ['changelogs', optional(array(lazy(() => changelogSchema)))],
});
