/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  expandoObject,
  lazy,
  nullable,
  number,
  optional,
  Schema,
  string,
} from '../schema';
import { IntervalTypeEnum, intervalTypeEnumSchema } from './intervalTypeEnum';
import { Joi, joiSchema } from './joi';
import {
  PaymentMethod1Enum,
  paymentMethod1EnumSchema,
} from './paymentMethod1Enum';
import {
  RecurringTypeIdEnum,
  recurringTypeIdEnumSchema,
} from './recurringTypeIdEnum';
import { StatusEnum, statusEnumSchema } from './statusEnum';

/** Recurring Information on `expand` */
export interface Recurring3 {
  /** Token ID */
  accountVaultId?: string;
  /** Token ID */
  tokenId?: string;
  /** Contact ID */
  contactId?: string | null;
  /** Token API ID */
  accountVaultApiId?: string | null;
  /** Token API ID */
  tokenApiId?: string | null;
  joi?: Joi;
  /** Active */
  active?: boolean;
  /** Description */
  description?: string | null;
  /** End date */
  endDate?: string | null;
  /** Installment Total Count */
  installmentTotalCount?: number | null;
  /** Interval */
  interval?: number;
  /** Interval Type */
  intervalType?: IntervalTypeEnum;
  /** Location ID */
  locationId?: string;
  /** Notification Days */
  notificationDays?: number | null;
  /** Payment Method */
  paymentMethod?: PaymentMethod1Enum;
  /** Product Transaction ID */
  productTransactionId?: string | null;
  /** Recurring ID */
  recurringId?: string | null;
  /** Recurring Api ID */
  recurringApiId?: string | null;
  /** Start date */
  startDate?: string;
  /** Status */
  status?: StatusEnum;
  /** Transaction amount */
  transactionAmount?: number;
  /** Terms Agree */
  termsAgree?: boolean;
  /** Terms Agree Ip */
  termsAgreeIp?: string | null;
  /** Custom field used for integrations */
  recurringC1?: string | null;
  /** Custom field used for integrations */
  recurringC2?: string | null;
  /** Custom field used for integrations */
  recurringC3?: string | null;
  /** Send To Proc As Recur */
  sendToProcAsRecur?: boolean;
  /** Tags */
  tags?: string[] | null;
  /** Retained Amount */
  secondaryAmount?: number | null;
  currency?: string;
  /** Recurring ID */
  id?: string;
  /** Next Run Date */
  nextRunDate?: string;
  /** Created Time Stamp */
  createdTs?: number;
  /** Modified Time Stamp */
  modifiedTs?: number;
  /** Recurring Type */
  recurringTypeId?: RecurringTypeIdEnum;
  /** Installment Amount Total */
  installmentAmountTotal?: number | null;
  /** User ID Created the register */
  createdUserId?: string;
  [key: string]: unknown;
}

export const recurring3Schema: Schema<Recurring3> = expandoObject({
  accountVaultId: ['account_vault_id', optional(string())],
  tokenId: ['token_id', optional(string())],
  contactId: ['contact_id', optional(nullable(string()))],
  accountVaultApiId: ['account_vault_api_id', optional(nullable(string()))],
  tokenApiId: ['token_api_id', optional(nullable(string()))],
  joi: ['_joi', optional(lazy(() => joiSchema))],
  active: ['active', optional(boolean())],
  description: ['description', optional(nullable(string()))],
  endDate: ['end_date', optional(nullable(string()))],
  installmentTotalCount: [
    'installment_total_count',
    optional(nullable(number())),
  ],
  interval: ['interval', optional(number())],
  intervalType: ['interval_type', optional(intervalTypeEnumSchema)],
  locationId: ['location_id', optional(string())],
  notificationDays: ['notification_days', optional(nullable(number()))],
  paymentMethod: ['payment_method', optional(paymentMethod1EnumSchema)],
  productTransactionId: [
    'product_transaction_id',
    optional(nullable(string())),
  ],
  recurringId: ['recurring_id', optional(nullable(string()))],
  recurringApiId: ['recurring_api_id', optional(nullable(string()))],
  startDate: ['start_date', optional(string())],
  status: ['status', optional(statusEnumSchema)],
  transactionAmount: ['transaction_amount', optional(number())],
  termsAgree: ['terms_agree', optional(boolean())],
  termsAgreeIp: ['terms_agree_ip', optional(nullable(string()))],
  recurringC1: ['recurring_c1', optional(nullable(string()))],
  recurringC2: ['recurring_c2', optional(nullable(string()))],
  recurringC3: ['recurring_c3', optional(nullable(string()))],
  sendToProcAsRecur: ['send_to_proc_as_recur', optional(boolean())],
  tags: ['tags', optional(nullable(array(string())))],
  secondaryAmount: ['secondary_amount', optional(nullable(number()))],
  currency: ['currency', optional(string())],
  id: ['id', optional(string())],
  nextRunDate: ['next_run_date', optional(string())],
  createdTs: ['created_ts', optional(number())],
  modifiedTs: ['modified_ts', optional(number())],
  recurringTypeId: ['recurring_type_id', optional(recurringTypeIdEnumSchema)],
  installmentAmountTotal: [
    'installment_amount_total',
    optional(nullable(number())),
  ],
  createdUserId: ['created_user_id', optional(string())],
});
