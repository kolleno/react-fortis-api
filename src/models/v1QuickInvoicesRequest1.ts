/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  expandoObject,
  lazy,
  nullable,
  number,
  optional,
  Schema,
  string,
} from '../schema';
import { File5, file5Schema } from './file5';
import { ItemList5, itemList5Schema } from './itemList5';

export interface V1QuickInvoicesRequest1 {
  /** Location ID */
  locationId?: string | null;
  /** Title */
  title?: string | null;
  /** Transaction ID */
  ccProductTransactionId?: string | null;
  /** ACH Product Transaction Id */
  achProductTransactionId?: string | null;
  /** Due Date, Format: Y-m-d */
  dueDate?: string | null;
  /** Item List */
  itemList?: ItemList5[];
  /** Allow Overpayment. */
  allowOverpayment?: boolean;
  /** Bank Funded Only override */
  bankFundedOnlyOverride?: boolean | null;
  /** Email */
  email?: string | null;
  /** Contact ID */
  contactId?: string | null;
  /** Contact API Id */
  contactApiId?: string | null;
  /** Quick Invoice API Id */
  quickInvoiceApiId?: string | null;
  /** Customer Id */
  customerId?: string | null;
  /** Expire Date. */
  expireDate?: string | null;
  /** Allow partial pay */
  allowPartialPay?: boolean;
  /** Attach Files to Email */
  attachFilesToEmail?: boolean;
  /** Send Email */
  sendEmail?: boolean;
  /** Invoice number */
  invoiceNumber?: string | null;
  /** Item Header */
  itemHeader?: string | null;
  /** Item footer */
  itemFooter?: string | null;
  /** Amount Due */
  amountDue?: number | null;
  /** Notification email */
  notificationEmail?: string | null;
  /** (DEPRECATED) Status Id */
  statusId?: number | null;
  /** Status Code */
  statusCode?: number | null;
  /** Note */
  note?: string | null;
  /** Notification days before due date */
  notificationDaysBeforeDueDate?: number | null;
  /** Notification days after due date */
  notificationDaysAfterDueDate?: number | null;
  /** Notification on due date */
  notificationOnDueDate?: boolean;
  /** Send Text To Pay */
  sendTextToPay?: boolean;
  /**
   * Files
   * >Maximum of 4 files & maximum size of 5MB per file.
   * >
   */
  files?: File5[];
  /** Remaining Balance */
  remainingBalance?: number | null;
  /** Single Payment Min Amount */
  singlePaymentMinAmount?: number | null;
  /** Single Payment Max Amount */
  singlePaymentMaxAmount?: number | null;
  /** Cell Phone */
  cellPhone?: string | null;
  /** Tags */
  tags?: string[] | null;
  /** Custom field 1 for api users to store custom data */
  quickInvoiceC1?: string | null;
  /** Custom field 2 for api users to store custom data */
  quickInvoiceC2?: string | null;
  /** Custom field 1 for api users to store custom data */
  quickInvoiceC3?: string | null;
  /** Auto Reopen. If set to true, a void, refund or detachment of a Transaction Payment will cause the QuickInvoice to be opened again */
  autoReopen?: boolean;
  [key: string]: unknown;
}

export const v1QuickInvoicesRequest1Schema: Schema<V1QuickInvoicesRequest1> = expandoObject(
  {
    locationId: ['location_id', optional(nullable(string()))],
    title: ['title', optional(nullable(string()))],
    ccProductTransactionId: [
      'cc_product_transaction_id',
      optional(nullable(string())),
    ],
    achProductTransactionId: [
      'ach_product_transaction_id',
      optional(nullable(string())),
    ],
    dueDate: ['due_date', optional(nullable(string()))],
    itemList: ['item_list', optional(array(lazy(() => itemList5Schema)))],
    allowOverpayment: ['allow_overpayment', optional(boolean())],
    bankFundedOnlyOverride: [
      'bank_funded_only_override',
      optional(nullable(boolean())),
    ],
    email: ['email', optional(nullable(string()))],
    contactId: ['contact_id', optional(nullable(string()))],
    contactApiId: ['contact_api_id', optional(nullable(string()))],
    quickInvoiceApiId: ['quick_invoice_api_id', optional(nullable(string()))],
    customerId: ['customer_id', optional(nullable(string()))],
    expireDate: ['expire_date', optional(nullable(string()))],
    allowPartialPay: ['allow_partial_pay', optional(boolean())],
    attachFilesToEmail: ['attach_files_to_email', optional(boolean())],
    sendEmail: ['send_email', optional(boolean())],
    invoiceNumber: ['invoice_number', optional(nullable(string()))],
    itemHeader: ['item_header', optional(nullable(string()))],
    itemFooter: ['item_footer', optional(nullable(string()))],
    amountDue: ['amount_due', optional(nullable(number()))],
    notificationEmail: ['notification_email', optional(nullable(string()))],
    statusId: ['status_id', optional(nullable(number()))],
    statusCode: ['status_code', optional(nullable(number()))],
    note: ['note', optional(nullable(string()))],
    notificationDaysBeforeDueDate: [
      'notification_days_before_due_date',
      optional(nullable(number())),
    ],
    notificationDaysAfterDueDate: [
      'notification_days_after_due_date',
      optional(nullable(number())),
    ],
    notificationOnDueDate: ['notification_on_due_date', optional(boolean())],
    sendTextToPay: ['send_text_to_pay', optional(boolean())],
    files: ['files', optional(array(lazy(() => file5Schema)))],
    remainingBalance: ['remaining_balance', optional(nullable(number()))],
    singlePaymentMinAmount: [
      'single_payment_min_amount',
      optional(nullable(number())),
    ],
    singlePaymentMaxAmount: [
      'single_payment_max_amount',
      optional(nullable(number())),
    ],
    cellPhone: ['cell_phone', optional(nullable(string()))],
    tags: ['tags', optional(nullable(array(string())))],
    quickInvoiceC1: ['quick_invoice_c1', optional(nullable(string()))],
    quickInvoiceC2: ['quick_invoice_c2', optional(nullable(string()))],
    quickInvoiceC3: ['quick_invoice_c3', optional(nullable(string()))],
    autoReopen: ['auto_reopen', optional(boolean())],
  }
);
