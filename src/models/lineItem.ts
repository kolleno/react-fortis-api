/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  expandoObject,
  nullable,
  number,
  optional,
  Schema,
  string,
} from '../schema';
import { DebitCreditEnum, debitCreditEnumSchema } from './debitCreditEnum';

export interface LineItem {
  /** Tax identification number of the merchant that reported the alternate tax amount. */
  alternateTaxId?: string | null;
  /** Indicator used to reflect debit (D) or credit (C) transaction. Allowed values: “D”, “C”. */
  debitCredit?: DebitCreditEnum | null;
  /** Description of the item. */
  description?: string;
  /** Total discount amount applied against the line item total ,Can accept Two (2) decimal places. */
  discountAmount?: number | null;
  /** Discount rate for the line item ,Can accept Two (2) decimal places. */
  discountRate?: number | null;
  /** Merchant-defined description code of the item. */
  productCode?: string;
  /** Quantity of the item, can accept Four (4) decimal places. */
  quantity?: number | null;
  /** Amount of any value added taxes, can accept Two (2) decimal places. */
  taxAmount?: number | null;
  /** Tax rate used to calculate the sales tax amount, can accept 2 decimal places. */
  taxRate?: number | null;
  /**
   * Type of value-added taxes that are being used (Conditional If tax amount is supplied)
   * >This field is only required when Merchant is directed to include by Mastercard.
   * >
   */
  taxTypeApplied?: string | null;
  /** Indicates the type of tax collected in relationship to a specific tax amount (Conditional If tax amount is supplied) */
  taxTypeId?: string | null;
  /** Units of measurement as used in international trade. (See Codes for Units of Measurement below for unit code abbreviations) */
  unitCode?: string;
  /** Unit cost of the item ,Can accept Four (4) decimal places. */
  unitCost?: number;
  /** An international description code of the individual good or service being supplied. */
  commodityCode?: string | null;
  /** Used if city or multiple county taxes need to be broken out separately ,Can accept Two (2) decimal places. */
  otherTaxAmount?: number | null;
  [key: string]: unknown;
}

export const lineItemSchema: Schema<LineItem> = expandoObject({
  alternateTaxId: ['alternate_tax_id', optional(nullable(string()))],
  debitCredit: ['debit_credit', optional(nullable(debitCreditEnumSchema))],
  description: ['description', optional(string())],
  discountAmount: ['discount_amount', optional(nullable(number()))],
  discountRate: ['discount_rate', optional(nullable(number()))],
  productCode: ['product_code', optional(string())],
  quantity: ['quantity', optional(nullable(number()))],
  taxAmount: ['tax_amount', optional(nullable(number()))],
  taxRate: ['tax_rate', optional(nullable(number()))],
  taxTypeApplied: ['tax_type_applied', optional(nullable(string()))],
  taxTypeId: ['tax_type_id', optional(nullable(string()))],
  unitCode: ['unit_code', optional(string())],
  unitCost: ['unit_cost', optional(number())],
  commodityCode: ['commodity_code', optional(nullable(string()))],
  otherTaxAmount: ['other_tax_amount', optional(nullable(number()))],
});
