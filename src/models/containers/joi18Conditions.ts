/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import { Conditions18, conditions18Schema } from '../conditions18';
import { Conditions181, conditions181Schema } from '../conditions181';
import { Conditions4, conditions4Schema } from '../conditions4';
import { Conditions41, conditions41Schema } from '../conditions41';
import { Conditions42, conditions42Schema } from '../conditions42';
import { Conditions43, conditions43Schema } from '../conditions43';

/** This is a container type for any-of types. */
export type Joi18Conditions =
  | Conditions18
  | Conditions181
  | Conditions4
  | Conditions41
  | Conditions42
  | Conditions43;

export const joi18ConditionsSchema: Schema<Joi18Conditions> = anyOf([
  conditions18Schema,
  conditions181Schema,
  conditions4Schema,
  conditions41Schema,
  conditions42Schema,
  conditions43Schema,
]);

export namespace Joi18Conditions {
  /**
   * Validation method to narrow down union type to Conditions18 type case.
   *
   * This is Conditions18 case.
   */
  export function isConditions18(value: unknown): value is Conditions18 {
    const validationResult = validateAndMap(value, conditions18Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Conditions181 type case.
   *
   * This is Conditions181 case.
   */
  export function isConditions181(value: unknown): value is Conditions181 {
    const validationResult = validateAndMap(value, conditions181Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Conditions4 type case.
   *
   * This is Conditions4 case.
   */
  export function isConditions4(value: unknown): value is Conditions4 {
    const validationResult = validateAndMap(value, conditions4Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Conditions41 type case.
   *
   * This is Conditions41 case.
   */
  export function isConditions41(value: unknown): value is Conditions41 {
    const validationResult = validateAndMap(value, conditions41Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Conditions42 type case.
   *
   * This is Conditions42 case.
   */
  export function isConditions42(value: unknown): value is Conditions42 {
    const validationResult = validateAndMap(value, conditions42Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Conditions43 type case.
   *
   * This is Conditions43 case.
   */
  export function isConditions43(value: unknown): value is Conditions43 {
    const validationResult = validateAndMap(value, conditions43Schema);
    return validationResult.errors === false;
  }
}
