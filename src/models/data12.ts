/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { expandoObject, optional, Schema, string } from '../schema';
import {
  AcsChallengeMandatedEnum,
  acsChallengeMandatedEnumSchema,
} from './acsChallengeMandatedEnum';
import {
  TransactionStatusEnum,
  transactionStatusEnumSchema,
} from './transactionStatusEnum';

export interface Data12 {
  /** Universally unique transaction identifier assigned by the 3DS Server to identify a single transaction. It has the same value as the corresponding received authentication request. This value has 36 characters in a format defined in IETF RFC 4122. */
  threeDsServerTransId?: string;
  /**
   * Fully qualified URL of the ACS in case the authentication response message indicates that further Cardholder interaction is required to complete the authentication.
   * This field is only present in Browser flow.
   */
  acsUrl?: string;
  /**
   * Indicates whether a transaction qualifies as an authenticated transaction.
   * >Y - Authentication / Account verification successful
   * >
   * >N - Not authenticated / Account not verified; Transaction denied
   * >
   * >U - Authentication / Account verification could not be performed; technical or other problem
   * >
   * >C - In order to complete the authentication, a challenge is required
   * >
   * >R - Authentication / Account verification Rejected. Issuer is rejecting authentication/verification and request that authorization not be attempted
   * >
   * >A - Attempts processing performed; Not authenticated / verified, but a proof of attempt authentication / verification is provided
   * >
   * >D - In order to complete the authentication, a challenge is required. Decoupled Authentication confirmed. (Only if the 3DS Server has initiated authentication with EMV 3DS 2.2.0 version or greater)
   * >
   * >I - Informational Only; 3DS Requestor challenge preference acknowledged. (Only if the 3DS Server has initiated authentication with EMV 3DS 2.2.0 version or greater)
   * >
   */
  transactionStatus?: TransactionStatusEnum;
  /** Payment System-specific value provided as part of the ACS registration for each supported DS. Authentication Value may be used to provide proof of authentication. */
  authenticationValue?: string;
  /** Payment System-specific value provided by the ACS to indicate the results of the attempt to authenticate the Cardholder. */
  eci?: string;
  /** Universally unique transaction identifier assigned by the DS to identify a single transaction. */
  dsTransId?: string;
  /** Universally unique transaction identifier assigned by the ACS to identify a single transaction. */
  acsTransId?: string;
  /**
   * Protocol version identifier This shall be the Protocol Version Number of the specification utilised by the system creating this message.
   * The Message Version Number is set by the 3DS Server which originates the protocol with the AReq message. The Message Version Number does not change during a 3DS transaction.
   */
  messageVersion?: string;
  /**
   * Indication of whether a challenge is required for the transaction to be authorised due to local/regional mandates or other variable.
   * >Y - Challenge is mandated
   * >
   * >N - Challenge is not mandated
   * >
   */
  acsChallengeMandated?: AcsChallengeMandatedEnum;
  /** Date and time of the purchase, converted into UTC. The field is limited to 14 characters, formatted as YYYYMMDDHHMMSS. */
  purchaseDate?: string;
  /** Base64-encoded Challenge Request object in case the authentication response message indicates that further Cardholder interaction is required to complete the authentication. */
  base64EncodedChallengeRequest?: string;
  [key: string]: unknown;
}

export const data12Schema: Schema<Data12> = expandoObject({
  threeDsServerTransId: ['three_ds_server_trans_id', optional(string())],
  acsUrl: ['acs_url', optional(string())],
  transactionStatus: [
    'transaction_status',
    optional(transactionStatusEnumSchema),
  ],
  authenticationValue: ['authentication_value', optional(string())],
  eci: ['eci', optional(string())],
  dsTransId: ['ds_trans_id', optional(string())],
  acsTransId: ['acs_trans_id', optional(string())],
  messageVersion: ['message_version', optional(string())],
  acsChallengeMandated: [
    'acs_challenge_mandated',
    optional(acsChallengeMandatedEnumSchema),
  ],
  purchaseDate: ['purchase_date', optional(string())],
  base64EncodedChallengeRequest: [
    'base64_encoded_challenge_request',
    optional(string()),
  ],
});
