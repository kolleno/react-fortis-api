/**
 * Fortis APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  expandoObject,
  lazy,
  nullable,
  number,
  optional,
  Schema,
  string,
} from '../schema';
import { Addon, addonSchema } from './addon';
import { Address1, address1Schema } from './address1';
import { BrandingDomain1, brandingDomain1Schema } from './brandingDomain1';
import { Changelog, changelogSchema } from './changelog';
import { CreatedUser, createdUserSchema } from './createdUser';
import { DeveloperCompany, developerCompanySchema } from './developerCompany';
import { Helppage, helppageSchema } from './helppage';
import {
  LocationBillingAccount,
  locationBillingAccountSchema,
} from './locationBillingAccount';
import {
  Locationmarketplace,
  locationmarketplaceSchema,
} from './locationmarketplace';
import { LocationTypeEnum, locationTypeEnumSchema } from './locationTypeEnum';
import { Marketplace, marketplaceSchema } from './marketplace';
import { Parent3, parent3Schema } from './parent3';
import { ProductFile1, productFile1Schema } from './productFile1';
import { ProductInvoice, productInvoiceSchema } from './productInvoice';
import {
  ProductTransaction1,
  productTransaction1Schema,
} from './productTransaction1';
import {
  QuickInvoiceSetting,
  quickInvoiceSettingSchema,
} from './quickInvoiceSetting';
import { Terminal2, terminal2Schema } from './terminal2';
import { TerminalRouter, terminalRouterSchema } from './terminalRouter';
import { User9, user9Schema } from './user9';

export interface List6 {
  /** Location ID */
  id?: string;
  /** Created Time Stamp */
  createdTs?: number;
  /** Modified Time Stamp */
  modifiedTs?: number;
  /** Account number */
  accountNumber?: string | null;
  /** Address */
  address?: Address1;
  /** GUID for Branding Domain */
  brandingDomainId?: string | null;
  /** If true, will email contact receipt for any transaction */
  contactEmailTrxReceiptDefault?: boolean;
  /** GUID for Location's default ACH Product Transaction */
  defaultAch?: string | null;
  /** GUID for Location's default CC Product Transaction */
  defaultCc?: string | null;
  /** Used as from email address when sending various notifications */
  emailReplyTo?: string | null;
  /** Fax number */
  fax?: string | null;
  /** Location api ID */
  locationApiId?: string | null;
  /** Location api key */
  locationApiKey?: string | null;
  /** Can be used to store custom information for location. */
  locationC1?: string | null;
  /** Can be used to store custom information for location. */
  locationC2?: string | null;
  /** Can be used to store custom information for location. */
  locationC3?: string | null;
  /** Name of the company */
  name?: string;
  /** Office phone number */
  officePhone?: string | null;
  /** Office phone extension number */
  officeExtPhone?: string | null;
  /** Time zone */
  tz?: string | null;
  /** Location GUID of the parent location */
  parentId?: string;
  /** If set to true will show 'Notes' tab on Contact */
  showContactNotes?: boolean;
  /** If set to true will show 'Files' tab on Contact */
  showContactFiles?: boolean;
  /** User ID Created the register */
  createdUserId?: string | null;
  /** Location Type */
  locationType?: LocationTypeEnum | null;
  /** Name of the parent location */
  parentName?: string | null;
  /** Ticket Hash Key */
  ticketHashKey?: string | null;
  /** Parent Information on `expand` */
  parent?: Parent3;
  /** User Information on `expand` */
  users?: User9[];
  /** Is Deletable Information on `expand` */
  isDeletable?: boolean;
  /** Terminal Information on `expand` */
  terminals?: Terminal2[];
  /** Branding Domain Information on `expand` */
  brandingDomain?: BrandingDomain1;
  /** Product Invoice Information on `expand` */
  productInvoice?: ProductInvoice;
  /** Product File Information on `expand` */
  productFiles?: ProductFile1[];
  /** User Information on `expand` */
  createdUser?: CreatedUser;
  /** Changelog Information on `expand` */
  changelogs?: Changelog[];
  /** Product Transaction Information on `expand` */
  productTransactions?: ProductTransaction1[];
  /** Terminal Router Information on `expand` */
  terminalRouters?: TerminalRouter[];
  /** Developer Company Information on `expand` */
  developerCompany?: DeveloperCompany;
  /** Developer Company Id Information on `expand` */
  developerCompanyId?: string | null;
  /** Helppage Information on `expand` */
  helppages?: Helppage[];
  /** Quick Invoice Setting Information on `expand` */
  quickInvoiceSetting?: QuickInvoiceSetting;
  /** Location Billing Account Information on `expand` */
  locationBillingAccounts?: LocationBillingAccount[];
  /** Marketplace Information on `expand` */
  marketplaces?: Marketplace[];
  /** Locationmarketplaces Information on `expand` */
  locationmarketplaces?: Locationmarketplace[];
  /** Addons Information on `expand` */
  addons?: Addon[];
  [key: string]: unknown;
}

export const list6Schema: Schema<List6> = expandoObject({
  id: ['id', optional(string())],
  createdTs: ['created_ts', optional(number())],
  modifiedTs: ['modified_ts', optional(number())],
  accountNumber: ['account_number', optional(nullable(string()))],
  address: ['address', optional(lazy(() => address1Schema))],
  brandingDomainId: ['branding_domain_id', optional(nullable(string()))],
  contactEmailTrxReceiptDefault: [
    'contact_email_trx_receipt_default',
    optional(boolean()),
  ],
  defaultAch: ['default_ach', optional(nullable(string()))],
  defaultCc: ['default_cc', optional(nullable(string()))],
  emailReplyTo: ['email_reply_to', optional(nullable(string()))],
  fax: ['fax', optional(nullable(string()))],
  locationApiId: ['location_api_id', optional(nullable(string()))],
  locationApiKey: ['location_api_key', optional(nullable(string()))],
  locationC1: ['location_c1', optional(nullable(string()))],
  locationC2: ['location_c2', optional(nullable(string()))],
  locationC3: ['location_c3', optional(nullable(string()))],
  name: ['name', optional(string())],
  officePhone: ['office_phone', optional(nullable(string()))],
  officeExtPhone: ['office_ext_phone', optional(nullable(string()))],
  tz: ['tz', optional(nullable(string()))],
  parentId: ['parent_id', optional(string())],
  showContactNotes: ['show_contact_notes', optional(boolean())],
  showContactFiles: ['show_contact_files', optional(boolean())],
  createdUserId: ['created_user_id', optional(nullable(string()))],
  locationType: ['location_type', optional(nullable(locationTypeEnumSchema))],
  parentName: ['parent_name', optional(nullable(string()))],
  ticketHashKey: ['ticket_hash_key', optional(nullable(string()))],
  parent: ['parent', optional(lazy(() => parent3Schema))],
  users: ['users', optional(array(lazy(() => user9Schema)))],
  isDeletable: ['is_deletable', optional(boolean())],
  terminals: ['terminals', optional(array(lazy(() => terminal2Schema)))],
  brandingDomain: [
    'branding_domain',
    optional(lazy(() => brandingDomain1Schema)),
  ],
  productInvoice: [
    'product_invoice',
    optional(lazy(() => productInvoiceSchema)),
  ],
  productFiles: [
    'product_files',
    optional(array(lazy(() => productFile1Schema))),
  ],
  createdUser: ['created_user', optional(lazy(() => createdUserSchema))],
  changelogs: ['changelogs', optional(array(lazy(() => changelogSchema)))],
  productTransactions: [
    'product_transactions',
    optional(array(lazy(() => productTransaction1Schema))),
  ],
  terminalRouters: [
    'terminal_routers',
    optional(array(lazy(() => terminalRouterSchema))),
  ],
  developerCompany: [
    'developer_company',
    optional(lazy(() => developerCompanySchema)),
  ],
  developerCompanyId: ['developer_company_id', optional(nullable(string()))],
  helppages: ['helppages', optional(array(lazy(() => helppageSchema)))],
  quickInvoiceSetting: [
    'quick_invoice_setting',
    optional(lazy(() => quickInvoiceSettingSchema)),
  ],
  locationBillingAccounts: [
    'location_billing_accounts',
    optional(array(lazy(() => locationBillingAccountSchema))),
  ],
  marketplaces: [
    'marketplaces',
    optional(array(lazy(() => marketplaceSchema))),
  ],
  locationmarketplaces: [
    'locationmarketplaces',
    optional(array(lazy(() => locationmarketplaceSchema))),
  ],
  addons: ['addons', optional(array(lazy(() => addonSchema)))],
});
